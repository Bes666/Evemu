/*  EVEmu: EVE Online Server Emulator
  
  **************************************************************
  This file is automatically generated, DO NOT EDIT IT DIRECTLY.
  **************************************************************
  
  (If you need to customize an object, you must copy that object
  into another source file, and give up the ability to generate it)
  
  
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; version 2 of the License.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY except by those people which sell it, which
  are required to give you total support for your newly bought product;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR
  A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#ifndef __Manufacturing_h__
#define __Manufacturing_h__

#include <string>
#include <vector>
#include <map>
#include "../common/common.h"
#include "../common/logsys.h"
#include "../common/PyRep.h"



class Call_GetJobs2 {
public:
	Call_GetJobs2();
	~Call_GetJobs2();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Call_GetJobs2 *Clone() const;
	void CloneFrom(const Call_GetJobs2 *from);
	
	uint32		ownerID;
	bool		completed;
	uint64		fromDate;
	uint64		toDate;


};


class Call_AssemblyLinesSelect {
public:
	Call_AssemblyLinesSelect();
	~Call_AssemblyLinesSelect();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Call_AssemblyLinesSelect *Clone() const;
	void CloneFrom(const Call_AssemblyLinesSelect *from);
	
	std::string	filter;


};


class PathElement {
public:
	PathElement();
	~PathElement();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepList **packet);
	PyRepList *Encode();
	PyRepList *FastEncode();
	PathElement *Clone() const;
	void CloneFrom(const PathElement *from);
	
	uint32		locationID;
	uint32		ownerID;
	uint32		flag;


};


class Call_InstallJob {
public:
	Call_InstallJob();
	~Call_InstallJob();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Call_InstallJob *Clone() const;
	void CloneFrom(const Call_InstallJob *from);
	
	/*  installationLocationData  */
	/*  invLocation  */
	uint32		installationInvLocationID;
	uint32		installationInvLocationGroupID;
	uint32		installationContainerID;
	uint32		installationAssemblyLineID;
	/*  installedItemLocationData  */
	/*  invLocation  */
	uint32		installedItemInvLocationID;
	uint32		installedItemInvLocationGroup;
	/*  List of PathElements, there is 1 on personal job, 3 on corp job  */
	PyRepList	installedItemPath;
	/*  itemSpecification  */
	uint32		installedItemID;
	/*  bomLocationData  */
	/*  invLocation  */
	uint32		bomInvLocationID;
	uint32		bomInvLocationGroup;
	/*  List of PathElements, there is 1 on personal job, 3 on corp job  */
	PyRepList	bomPath;
	uint32		flagOutput;
	uint32		runs;
	uint32		activityID;
	uint32		licensedProductionRuns;
	bool		isCorpJob;
	std::string	description;


};


class MaterialList {
public:
	MaterialList();
	~MaterialList();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepObject **packet);
	PyRepObject *Encode();
	PyRepObject *FastEncode();
	MaterialList *Clone() const;
	void CloneFrom(const MaterialList *from);
	
	/* object of type util.Rowset */
	std::string	header_requiredTypeID;
	std::string	header_quantity;
	std::string	header_damagePerJob;
	std::string	header_isSkillCheck;
	std::string	header_requiresHP;
	std::string	RowClass;
	PyRepList	lines;


};


class MaterialList_Line {
public:
	MaterialList_Line();
	~MaterialList_Line();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepList **packet);
	PyRepList *Encode();
	PyRepList *FastEncode();
	MaterialList_Line *Clone() const;
	void CloneFrom(const MaterialList_Line *from);
	
	uint32		requiredTypeID;
	uint32		quantity;
	double		damagePerJob;
	uint32		isSkillCheck;
	bool		requiresHP;


};


class BillOfMaterials {
public:
	BillOfMaterials();
	~BillOfMaterials();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepObject **packet);
	PyRepObject *Encode();
	PyRepObject *FastEncode();
	BillOfMaterials *Clone() const;
	void CloneFrom(const BillOfMaterials *from);
	
	/* object of type util.Row */
	std::string	header_rawMaterials;
	std::string	header_extras;
	std::string	header_wasteMaterials;
	std::string	header_skills;
	MaterialList	rawMaterials;
	MaterialList	extras;
	MaterialList	wasteMaterials;
	std::map<uint32, PyRep *>	skills;


};


class Rsp_InstallJob {
public:
	Rsp_InstallJob();
	~Rsp_InstallJob();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Rsp_InstallJob *Clone() const;
	void CloneFrom(const Rsp_InstallJob *from);
	
	/* object of type util.Row */
	std::string	header_bom;
	std::string	header_materialMultiplier;
	std::string	header_charMaterialMultiplier;
	std::string	header_timeMultiplier;
	std::string	header_charTimeMultiplier;
	std::string	header_cost;
	std::string	header_installCost;
	std::string	header_usageCost;
	std::string	header_productionTime;
	std::string	header_maxJobStartTime;
	BillOfMaterials	bom;
	double		materialMultiplier;
	double		charMaterialMultiplier;
	double		timeMultiplier;
	double		charTimeMultiplier;
	double		cost;
	double		installCost;
	double		usageCost;
	uint32		productionTime;
	uint64		maxJobStartTime;
	/*  optional  */
	uint32		installedItemID;


};


class Call_CompleteJob {
public:
	Call_CompleteJob();
	~Call_CompleteJob();
	
	void Dump(LogType type, const char *pfx = "") const;
	bool Decode(PyRep **packet);	//consumes packet
	bool Decode(PyRepTuple **packet);
	PyRepTuple *Encode();
	PyRepTuple *FastEncode();
	Call_CompleteJob *Clone() const;
	void CloneFrom(const Call_CompleteJob *from);
	
	/*  installationLocationData  */
	/*  invLocation  */
	uint32		invLocationID;
	uint32		invLocationGroupID;
	uint32		containerID;
	uint32		jobID;
	bool		cancel;


};



#endif


