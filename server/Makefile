# Makefile.in generated by automake 1.9.6 from Makefile.am.
# server/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/evemu
pkglibdir = $(libdir)/evemu
pkgincludedir = $(includedir)/evemu
top_builddir = ..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
bin_PROGRAMS = server$(EXEEXT)
subdir = server
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_lib_mysql.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
LIBRARIES = $(noinst_LIBRARIES)
ARFLAGS = cru
libaccount_a_AR = $(AR) $(ARFLAGS)
libaccount_a_LIBADD =
am_libaccount_a_OBJECTS = AccountDB.$(OBJEXT) AccountService.$(OBJEXT) \
	AuthService.$(OBJEXT)
libaccount_a_OBJECTS = $(am_libaccount_a_OBJECTS)
libadmin_a_AR = $(AR) $(ARFLAGS)
libadmin_a_LIBADD =
am_libadmin_a_OBJECTS = AlertService.$(OBJEXT) AllCommands.$(OBJEXT) \
	CommandDB.$(OBJEXT) CommandDispatcher.$(OBJEXT) \
	GMCommands.$(OBJEXT) PetitionerService.$(OBJEXT) \
	SlashService.$(OBJEXT)
libadmin_a_OBJECTS = $(am_libadmin_a_OBJECTS)
libcache_a_AR = $(AR) $(ARFLAGS)
libcache_a_LIBADD =
am_libcache_a_OBJECTS = ObjCacheDB.$(OBJEXT) ObjCacheService.$(OBJEXT)
libcache_a_OBJECTS = $(am_libcache_a_OBJECTS)
libcharacter_a_AR = $(AR) $(ARFLAGS)
libcharacter_a_LIBADD =
am_libcharacter_a_OBJECTS = CharacterDB.$(OBJEXT) \
	CharacterService.$(OBJEXT) CharMgrService.$(OBJEXT) \
	SkillMgrService.$(OBJEXT)
libcharacter_a_OBJECTS = $(am_libcharacter_a_OBJECTS)
libchat_a_AR = $(AR) $(ARFLAGS)
libchat_a_LIBADD =
am_libchat_a_OBJECTS = LookupService.$(OBJEXT) LSCChannel.$(OBJEXT) \
	LSCDB.$(OBJEXT) LSCService.$(OBJEXT) \
	OnlineStatusService.$(OBJEXT)
libchat_a_OBJECTS = $(am_libchat_a_OBJECTS)
libconfig_a_AR = $(AR) $(ARFLAGS)
libconfig_a_LIBADD =
am_libconfig_a_OBJECTS = ConfigDB.$(OBJEXT) ConfigService.$(OBJEXT) \
	LanguageService.$(OBJEXT)
libconfig_a_OBJECTS = $(am_libconfig_a_OBJECTS)
libcorporation_a_AR = $(AR) $(ARFLAGS)
libcorporation_a_LIBADD =
am_libcorporation_a_OBJECTS = CorpMgrService.$(OBJEXT) \
	CorporationDB.$(OBJEXT) CorporationService.$(OBJEXT) \
	CorpRegistryService.$(OBJEXT) CorpStationMgrService.$(OBJEXT)
libcorporation_a_OBJECTS = $(am_libcorporation_a_OBJECTS)
libdogmaim_a_AR = $(AR) $(ARFLAGS)
libdogmaim_a_LIBADD =
am_libdogmaim_a_OBJECTS = DogmaIMDB.$(OBJEXT) DogmaIMService.$(OBJEXT)
libdogmaim_a_OBJECTS = $(am_libdogmaim_a_OBJECTS)
libinventory_a_AR = $(AR) $(ARFLAGS)
libinventory_a_LIBADD =
am_libinventory_a_OBJECTS = InvBrokerService.$(OBJEXT) \
	InventoryDB.$(OBJEXT) InventoryItem.$(OBJEXT) ItemDB.$(OBJEXT) \
	ItemFactory.$(OBJEXT)
libinventory_a_OBJECTS = $(am_libinventory_a_OBJECTS)
libmanufacturing_a_AR = $(AR) $(ARFLAGS)
libmanufacturing_a_LIBADD =
am_libmanufacturing_a_OBJECTS = FactoryDB.$(OBJEXT) \
	FactoryService.$(OBJEXT) RamProxyDB.$(OBJEXT) \
	RamProxyService.$(OBJEXT)
libmanufacturing_a_OBJECTS = $(am_libmanufacturing_a_OBJECTS)
libmap_a_AR = $(AR) $(ARFLAGS)
libmap_a_LIBADD =
am_libmap_a_OBJECTS = MapDB.$(OBJEXT) MapService.$(OBJEXT)
libmap_a_OBJECTS = $(am_libmap_a_OBJECTS)
libmarket_a_AR = $(AR) $(ARFLAGS)
libmarket_a_LIBADD =
am_libmarket_a_OBJECTS = BillMgrService.$(OBJEXT) MarketDB.$(OBJEXT) \
	MarketProxyService.$(OBJEXT)
libmarket_a_OBJECTS = $(am_libmarket_a_OBJECTS)
libmining_a_AR = $(AR) $(ARFLAGS)
libmining_a_LIBADD =
am_libmining_a_OBJECTS = AsteroidBeltManager.$(OBJEXT) \
	Asteroid.$(OBJEXT) MiningCommands.$(OBJEXT) MiningDB.$(OBJEXT) \
	ReprocessingDB.$(OBJEXT) ReprocessingService.$(OBJEXT)
libmining_a_OBJECTS = $(am_libmining_a_OBJECTS)
libmissions_a_AR = $(AR) $(ARFLAGS)
libmissions_a_LIBADD =
am_libmissions_a_OBJECTS = Agent.$(OBJEXT) AgentMgrService.$(OBJEXT) \
	MissionDB.$(OBJEXT) MissionMgrService.$(OBJEXT)
libmissions_a_OBJECTS = $(am_libmissions_a_OBJECTS)
libnpc_a_AR = $(AR) $(ARFLAGS)
libnpc_a_LIBADD =
am_libnpc_a_OBJECTS = NPCAI.$(OBJEXT)
libnpc_a_OBJECTS = $(am_libnpc_a_OBJECTS)
libship_a_AR = $(AR) $(ARFLAGS)
libship_a_LIBADD =
am_libship_a_OBJECTS = BeyonceService.$(OBJEXT) \
	DestinyManager.$(OBJEXT) InsuranceService.$(OBJEXT) \
	ModuleManager.$(OBJEXT) ShipDB.$(OBJEXT) ShipService.$(OBJEXT) \
	TargetManager.$(OBJEXT)
libship_a_OBJECTS = $(am_libship_a_OBJECTS)
libspawn_a_AR = $(AR) $(ARFLAGS)
libspawn_a_LIBADD =
am_libspawn_a_OBJECTS = SpawnDB.$(OBJEXT) SpawnManager.$(OBJEXT)
libspawn_a_OBJECTS = $(am_libspawn_a_OBJECTS)
libstanding_a_AR = $(AR) $(ARFLAGS)
libstanding_a_LIBADD =
am_libstanding_a_OBJECTS = Standing2Service.$(OBJEXT) \
	StandingDB.$(OBJEXT)
libstanding_a_OBJECTS = $(am_libstanding_a_OBJECTS)
libstation_a_AR = $(AR) $(ARFLAGS)
libstation_a_LIBADD =
am_libstation_a_OBJECTS = JumpCloneService.$(OBJEXT) \
	StationDB.$(OBJEXT) StationService.$(OBJEXT) \
	StationSvcService.$(OBJEXT)
libstation_a_OBJECTS = $(am_libstation_a_OBJECTS)
libsystem_a_AR = $(AR) $(ARFLAGS)
libsystem_a_LIBADD =
am_libsystem_a_OBJECTS = BubbleManager.$(OBJEXT) Damage.$(OBJEXT) \
	DungeonService.$(OBJEXT) KeeperService.$(OBJEXT) \
	ScenarioService.$(OBJEXT) SystemBubble.$(OBJEXT) \
	SystemDB.$(OBJEXT) SystemEntities.$(OBJEXT) \
	SystemEntity.$(OBJEXT) SystemManager.$(OBJEXT)
libsystem_a_OBJECTS = $(am_libsystem_a_OBJECTS)
libtutorial_a_AR = $(AR) $(ARFLAGS)
libtutorial_a_LIBADD =
am_libtutorial_a_OBJECTS = TutorialDB.$(OBJEXT) \
	TutorialService.$(OBJEXT)
libtutorial_a_OBJECTS = $(am_libtutorial_a_OBJECTS)
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_server_OBJECTS = BookmarkService.$(OBJEXT) Client.$(OBJEXT) \
	ClientSession.$(OBJEXT) EntityList.$(OBJEXT) \
	EVEmuServerConfig.$(OBJEXT) main.$(OBJEXT) NPC.$(OBJEXT) \
	PyBoundObject.$(OBJEXT) PyCallable.$(OBJEXT) \
	PyService.$(OBJEXT) PyServiceMgr.$(OBJEXT) ServiceDB.$(OBJEXT)
server_OBJECTS = $(am_server_OBJECTS)
server_DEPENDENCIES =
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(libaccount_a_SOURCES) $(libadmin_a_SOURCES) \
	$(libcache_a_SOURCES) $(libcharacter_a_SOURCES) \
	$(libchat_a_SOURCES) $(libconfig_a_SOURCES) \
	$(libcorporation_a_SOURCES) $(libdogmaim_a_SOURCES) \
	$(libinventory_a_SOURCES) $(libmanufacturing_a_SOURCES) \
	$(libmap_a_SOURCES) $(libmarket_a_SOURCES) \
	$(libmining_a_SOURCES) $(libmissions_a_SOURCES) \
	$(libnpc_a_SOURCES) $(libship_a_SOURCES) $(libspawn_a_SOURCES) \
	$(libstanding_a_SOURCES) $(libstation_a_SOURCES) \
	$(libsystem_a_SOURCES) $(libtutorial_a_SOURCES) \
	$(server_SOURCES)
DIST_SOURCES = $(libaccount_a_SOURCES) $(libadmin_a_SOURCES) \
	$(libcache_a_SOURCES) $(libcharacter_a_SOURCES) \
	$(libchat_a_SOURCES) $(libconfig_a_SOURCES) \
	$(libcorporation_a_SOURCES) $(libdogmaim_a_SOURCES) \
	$(libinventory_a_SOURCES) $(libmanufacturing_a_SOURCES) \
	$(libmap_a_SOURCES) $(libmarket_a_SOURCES) \
	$(libmining_a_SOURCES) $(libmissions_a_SOURCES) \
	$(libnpc_a_SOURCES) $(libship_a_SOURCES) $(libspawn_a_SOURCES) \
	$(libstanding_a_SOURCES) $(libstation_a_SOURCES) \
	$(libsystem_a_SOURCES) $(libtutorial_a_SOURCES) \
	$(server_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/frank/devel/evemu/branches/aim_autotools/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/frank/devel/evemu/branches/aim_autotools/missing --run tar
AM_CXXFLAGS =   -I/usr/include/mysql -DBIG_JOINS=1 -fPIC -Wall
AM_LDFLAGS = 
AR = ar
ARCH = x86
AUTOCONF = ${SHELL} /home/frank/devel/evemu/branches/aim_autotools/missing --run autoconf
AUTOHEADER = ${SHELL} /home/frank/devel/evemu/branches/aim_autotools/missing --run autoheader
AUTOMAKE = ${SHELL} /home/frank/devel/evemu/branches/aim_autotools/missing --run automake-1.9
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
COLLECTOR_FALSE = 
COLLECTOR_TRUE = #
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DSYMUTIL = 
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EVETOOL_FALSE = 
EVETOOL_TRUE = #
EXEEXT = 
F77 = 
FFLAGS = 
GREP = /bin/grep
INCLUDES =  -I$(srcdir)/../common/
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/frank/devel/evemu/branches/aim_autotools/missing --run makeinfo
MYSQL_CFLAGS = -I/usr/include/mysql -DBIG_JOINS=1 -fPIC
MYSQL_CONFIG = /usr/bin/mysql_config
MYSQL_LDFLAGS = -Wl,-Bsymbolic-functions -L/usr/lib/mysql -lmysqlclient
MYSQL_VERSION = 5.0.51a
NMEDIT = 
OBJEXT = o
PACKAGE = evemu
PACKAGE_BUGREPORT = nospam@evemu.sf.net
PACKAGE_NAME = evemu
PACKAGE_STRING = evemu 0.6-trunk
PACKAGE_TARNAME = evemu
PACKAGE_VERSION = 0.6-trunk
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
VERSION = 0.6-trunk
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = 
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = /home/frank/devel/evemu/branches/aim_autotools/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
noinst_LIBRARIES = \
	libaccount.a \
	libadmin.a \
	libcache.a \
	libcharacter.a \
	libchat.a \
	libcorporation.a \
	libconfig.a \
	libdogmaim.a \
	libinventory.a \
	libmanufacturing.a \
	libmap.a \
	libmarket.a \
	libmining.a \
	libmissions.a \
	libstanding.a \
	libnpc.a \
	libspawn.a \
	libship.a \
	libstation.a \
	libsystem.a \
	libtutorial.a

libaccount_a_SOURCES = \
	account/AccountDB.cpp \
	account/AccountDB.h \
	account/AccountService.cpp \
	account/AccountService.h \
	account/AuthService.cpp \
	account/AuthService.h

libadmin_a_SOURCES = \
	admin/AlertService.cpp \
	admin/AlertService.h \
	admin/AllCommands.cpp \
	admin/AllCommands.h \
	admin/AllCommandsList.h \
	admin/CommandDB.cpp \
	admin/CommandDB.h \
	admin/CommandDispatcher.cpp \
	admin/CommandDispatcher.h \
	admin/GMCommands.cpp \
	admin/GMCommands.h \
	admin/PetitionerService.cpp \
	admin/PetitionerService.h \
	admin/SlashService.cpp \
	admin/SlashService.h

libcache_a_SOURCES = \
	cache/CachableList.h \
	cache/ObjCacheDB.cpp \
	cache/ObjCacheDB.h \
	cache/ObjCacheService.cpp \
	cache/ObjCacheService.h

libcharacter_a_SOURCES = \
	character/CharacterDB.cpp \
	character/CharacterDB.h \
	character/CharacterService.cpp \
	character/CharacterService.h \
	character/CharMgrService.cpp \
	character/CharMgrService.h \
	character/SkillMgrService.cpp \
	character/SkillMgrService.h

libchat_a_SOURCES = \
	chat/LookupService.cpp \
	chat/LookupService.h \
	chat/LSCChannel.cpp \
	chat/LSCChannel.h \
	chat/LSCDB.cpp \
	chat/LSCDB.h \
	chat/LSCService.cpp \
	chat/LSCService.h \
	chat/OnlineStatusService.cpp \
	chat/OnlineStatusService.h

libconfig_a_SOURCES = \
	config/ConfigDB.cpp \
	config/ConfigDB.h \
	config/ConfigService.cpp \
	config/ConfigService.h \
	config/LanguageService.cpp \
	config/LanguageService.h

libcorporation_a_SOURCES = \
	corporation/CorpMgrService.cpp \
	corporation/CorpMgrService.h \
	corporation/CorporationCarrier.h \
	corporation/CorporationDB.cpp \
	corporation/CorporationDB.h \
	corporation/CorporationService.cpp \
	corporation/CorporationService.h \
	corporation/CorpRegistryService.cpp \
	corporation/CorpRegistryService.h \
	corporation/CorpStationMgrService.cpp \
	corporation/CorpStationMgrService.h

libdogmaim_a_SOURCES = \
	dogmaim/DogmaIMDB.cpp \
	dogmaim/DogmaIMDB.h \
	dogmaim/DogmaIMService.cpp \
	dogmaim/DogmaIMService.h

libinventory_a_SOURCES = \
	inventory/EVEAttributes.h \
	inventory/InvBrokerService.cpp \
	inventory/InvBrokerService.h \
	inventory/InventoryDB.cpp \
	inventory/InventoryDB.h \
	inventory/InventoryItem.cpp \
	inventory/InventoryItem.h \
	inventory/ItemDB.cpp \
	inventory/ItemDB.h \
	inventory/ItemFactory.cpp \
	inventory/ItemFactory.h

libmanufacturing_a_SOURCES = \
	manufacturing/FactoryDB.cpp \
	manufacturing/FactoryDB.h \
	manufacturing/FactoryService.cpp \
	manufacturing/FactoryService.h \
	manufacturing/RamProxyDB.cpp \
	manufacturing/RamProxyDB.h \
	manufacturing/RamProxyService.cpp \
	manufacturing/RamProxyService.h

libmap_a_SOURCES = \
	map/MapDB.cpp \
	map/MapDB.h \
	map/MapService.cpp \
	map/MapService.h

libmarket_a_SOURCES = \
	market/BillMgrService.cpp \
	market/BillMgrService.h \
	market/MarketDB.cpp \
	market/MarketDB.h \
	market/MarketProxyService.cpp \
	market/MarketProxyService.h

libmining_a_SOURCES = \
	mining/AsteroidBeltManager.cpp \
	mining/AsteroidBeltManager.h \
	mining/Asteroid.cpp \
	mining/Asteroid.h \
	mining/MiningCommands.cpp \
	mining/MiningCommands.h \
	mining/MiningDB.cpp \
	mining/MiningDB.h \
	mining/ReprocessingDB.cpp \
	mining/ReprocessingDB.h \
	mining/ReprocessingService.cpp \
	mining/ReprocessingService.h

libmissions_a_SOURCES = \
	missions/Agent.cpp \
	missions/Agent.h \
	missions/AgentMgrService.cpp \
	missions/AgentMgrService.h \
	missions/MissionDB.cpp \
	missions/MissionDB.h \
	missions/MissionMgrService.cpp \
	missions/MissionMgrService.h

libnpc_a_SOURCES = \
	npc/NPCAI.cpp \
	npc/NPCAI.h


# Broken? missing libs/cppstates
#	npc/NPCAI_State.cpp 
#	npc/NPCAI_State.h
libship_a_SOURCES = \
	ship/BeyonceService.cpp \
	ship/BeyonceService.h \
	ship/DestinyManager.cpp \
	ship/DestinyManager.h \
	ship/InsuranceService.cpp \
	ship/InsuranceService.h \
	ship/ModuleManager.cpp \
	ship/ModuleManager.h \
	ship/ShipDB.cpp \
	ship/ShipDB.h \
	ship/ShipService.cpp \
	ship/ShipService.h \
	ship/TargetManager.cpp \
	ship/TargetManager.h

libspawn_a_SOURCES = \
	spawn/SpawnDB.cpp \
	spawn/SpawnDB.h \
	spawn/SpawnManager.cpp \
	spawn/SpawnManager.h

libstanding_a_SOURCES = \
	standing/Standing2Service.cpp \
	standing/Standing2Service.h \
	standing/StandingDB.cpp \
	standing/StandingDB.h

libstation_a_SOURCES = \
	station/JumpCloneService.cpp \
	station/JumpCloneService.h \
	station/StationDB.cpp \
	station/StationDB.h \
	station/StationService.cpp \
	station/StationService.h \
	station/StationSvcService.cpp \
	station/StationSvcService.h

libsystem_a_SOURCES = \
	system/BubbleManager.cpp \
	system/BubbleManager.h \
	system/Damage.cpp \
	system/Damage.h \
	system/DungeonService.cpp \
	system/DungeonService.h \
	system/KeeperService.cpp \
	system/KeeperService.h \
	system/ScenarioService.cpp \
	system/ScenarioService.h \
	system/SystemBubble.cpp \
	system/SystemBubble.h \
	system/SystemDB.cpp \
	system/SystemDB.h \
	system/SystemEntities.cpp \
	system/SystemEntities.h \
	system/SystemEntity.cpp \
	system/SystemEntity.h \
	system/SystemManager.cpp \
	system/SystemManager.h

libtutorial_a_SOURCES = \
	tutorial/TutorialDB.cpp \
	tutorial/TutorialDB.h \
	tutorial/TutorialService.cpp \
	tutorial/TutorialService.h

server_SOURCES = \
	BookmarkService.cpp \
	BookmarkService.h \
	Client.cpp \
	Client.h \
	ClientSession.cpp \
	ClientSession_fields.h \
	ClientSession.h \
	EntityList.cpp \
	EntityList.h \
	EVEmuServerConfig.cpp \
	EVEmuServerConfig_elements.h \
	EVEmuServerConfig.h \
	main.cpp \
	NPC.cpp \
	NPC.h \
	PyBoundObject.cpp \
	PyBoundObject.h \
	PyCallable.cpp \
	PyCallable.h \
	PyServiceCD.h \
	PyService.cpp \
	PyService.h \
	PyServiceMgr.cpp \
	PyServiceMgr.h \
	ServiceDB.cpp \
	ServiceDB.h

server_LDADD = \
  -laccount \
  -ladmin \
  -lcache \
  -lcharacter \
  -lchat \
  -lcorporation \
  -lconfig \
  -ldogmaim \
  -linventory \
  -lmanufacturing \
  -lmap \
  -lmarket \
  -lmining \
  -lmissions \
  -lstanding \
  -lnpc \
  -lspawn \
  -lship \
  -lstation \
  -lsystem \
	-ltutorial \
	-ltinyxml \
	-lcommon \
	-lpackets \
	-lz \
	-lpthread \
	-lpcap \
	-ldl 

server_LDFLAGS = \
	-L$(srcdir)/../server/ \
	-L$(srcdir)/../common/ \
	-L$(srcdir)/../packets/ \
	-Wl,-Bsymbolic-functions -L/usr/lib/mysql -lmysqlclient

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  server/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  server/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)
libaccount.a: $(libaccount_a_OBJECTS) $(libaccount_a_DEPENDENCIES) 
	-rm -f libaccount.a
	$(libaccount_a_AR) libaccount.a $(libaccount_a_OBJECTS) $(libaccount_a_LIBADD)
	$(RANLIB) libaccount.a
libadmin.a: $(libadmin_a_OBJECTS) $(libadmin_a_DEPENDENCIES) 
	-rm -f libadmin.a
	$(libadmin_a_AR) libadmin.a $(libadmin_a_OBJECTS) $(libadmin_a_LIBADD)
	$(RANLIB) libadmin.a
libcache.a: $(libcache_a_OBJECTS) $(libcache_a_DEPENDENCIES) 
	-rm -f libcache.a
	$(libcache_a_AR) libcache.a $(libcache_a_OBJECTS) $(libcache_a_LIBADD)
	$(RANLIB) libcache.a
libcharacter.a: $(libcharacter_a_OBJECTS) $(libcharacter_a_DEPENDENCIES) 
	-rm -f libcharacter.a
	$(libcharacter_a_AR) libcharacter.a $(libcharacter_a_OBJECTS) $(libcharacter_a_LIBADD)
	$(RANLIB) libcharacter.a
libchat.a: $(libchat_a_OBJECTS) $(libchat_a_DEPENDENCIES) 
	-rm -f libchat.a
	$(libchat_a_AR) libchat.a $(libchat_a_OBJECTS) $(libchat_a_LIBADD)
	$(RANLIB) libchat.a
libconfig.a: $(libconfig_a_OBJECTS) $(libconfig_a_DEPENDENCIES) 
	-rm -f libconfig.a
	$(libconfig_a_AR) libconfig.a $(libconfig_a_OBJECTS) $(libconfig_a_LIBADD)
	$(RANLIB) libconfig.a
libcorporation.a: $(libcorporation_a_OBJECTS) $(libcorporation_a_DEPENDENCIES) 
	-rm -f libcorporation.a
	$(libcorporation_a_AR) libcorporation.a $(libcorporation_a_OBJECTS) $(libcorporation_a_LIBADD)
	$(RANLIB) libcorporation.a
libdogmaim.a: $(libdogmaim_a_OBJECTS) $(libdogmaim_a_DEPENDENCIES) 
	-rm -f libdogmaim.a
	$(libdogmaim_a_AR) libdogmaim.a $(libdogmaim_a_OBJECTS) $(libdogmaim_a_LIBADD)
	$(RANLIB) libdogmaim.a
libinventory.a: $(libinventory_a_OBJECTS) $(libinventory_a_DEPENDENCIES) 
	-rm -f libinventory.a
	$(libinventory_a_AR) libinventory.a $(libinventory_a_OBJECTS) $(libinventory_a_LIBADD)
	$(RANLIB) libinventory.a
libmanufacturing.a: $(libmanufacturing_a_OBJECTS) $(libmanufacturing_a_DEPENDENCIES) 
	-rm -f libmanufacturing.a
	$(libmanufacturing_a_AR) libmanufacturing.a $(libmanufacturing_a_OBJECTS) $(libmanufacturing_a_LIBADD)
	$(RANLIB) libmanufacturing.a
libmap.a: $(libmap_a_OBJECTS) $(libmap_a_DEPENDENCIES) 
	-rm -f libmap.a
	$(libmap_a_AR) libmap.a $(libmap_a_OBJECTS) $(libmap_a_LIBADD)
	$(RANLIB) libmap.a
libmarket.a: $(libmarket_a_OBJECTS) $(libmarket_a_DEPENDENCIES) 
	-rm -f libmarket.a
	$(libmarket_a_AR) libmarket.a $(libmarket_a_OBJECTS) $(libmarket_a_LIBADD)
	$(RANLIB) libmarket.a
libmining.a: $(libmining_a_OBJECTS) $(libmining_a_DEPENDENCIES) 
	-rm -f libmining.a
	$(libmining_a_AR) libmining.a $(libmining_a_OBJECTS) $(libmining_a_LIBADD)
	$(RANLIB) libmining.a
libmissions.a: $(libmissions_a_OBJECTS) $(libmissions_a_DEPENDENCIES) 
	-rm -f libmissions.a
	$(libmissions_a_AR) libmissions.a $(libmissions_a_OBJECTS) $(libmissions_a_LIBADD)
	$(RANLIB) libmissions.a
libnpc.a: $(libnpc_a_OBJECTS) $(libnpc_a_DEPENDENCIES) 
	-rm -f libnpc.a
	$(libnpc_a_AR) libnpc.a $(libnpc_a_OBJECTS) $(libnpc_a_LIBADD)
	$(RANLIB) libnpc.a
libship.a: $(libship_a_OBJECTS) $(libship_a_DEPENDENCIES) 
	-rm -f libship.a
	$(libship_a_AR) libship.a $(libship_a_OBJECTS) $(libship_a_LIBADD)
	$(RANLIB) libship.a
libspawn.a: $(libspawn_a_OBJECTS) $(libspawn_a_DEPENDENCIES) 
	-rm -f libspawn.a
	$(libspawn_a_AR) libspawn.a $(libspawn_a_OBJECTS) $(libspawn_a_LIBADD)
	$(RANLIB) libspawn.a
libstanding.a: $(libstanding_a_OBJECTS) $(libstanding_a_DEPENDENCIES) 
	-rm -f libstanding.a
	$(libstanding_a_AR) libstanding.a $(libstanding_a_OBJECTS) $(libstanding_a_LIBADD)
	$(RANLIB) libstanding.a
libstation.a: $(libstation_a_OBJECTS) $(libstation_a_DEPENDENCIES) 
	-rm -f libstation.a
	$(libstation_a_AR) libstation.a $(libstation_a_OBJECTS) $(libstation_a_LIBADD)
	$(RANLIB) libstation.a
libsystem.a: $(libsystem_a_OBJECTS) $(libsystem_a_DEPENDENCIES) 
	-rm -f libsystem.a
	$(libsystem_a_AR) libsystem.a $(libsystem_a_OBJECTS) $(libsystem_a_LIBADD)
	$(RANLIB) libsystem.a
libtutorial.a: $(libtutorial_a_OBJECTS) $(libtutorial_a_DEPENDENCIES) 
	-rm -f libtutorial.a
	$(libtutorial_a_AR) libtutorial.a $(libtutorial_a_OBJECTS) $(libtutorial_a_LIBADD)
	$(RANLIB) libtutorial.a
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
server$(EXEEXT): $(server_OBJECTS) $(server_DEPENDENCIES) 
	@rm -f server$(EXEEXT)
	$(CXXLINK) $(server_LDFLAGS) $(server_OBJECTS) $(server_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/AccountDB.Po
include ./$(DEPDIR)/AccountService.Po
include ./$(DEPDIR)/Agent.Po
include ./$(DEPDIR)/AgentMgrService.Po
include ./$(DEPDIR)/AlertService.Po
include ./$(DEPDIR)/AllCommands.Po
include ./$(DEPDIR)/Asteroid.Po
include ./$(DEPDIR)/AsteroidBeltManager.Po
include ./$(DEPDIR)/AuthService.Po
include ./$(DEPDIR)/BeyonceService.Po
include ./$(DEPDIR)/BillMgrService.Po
include ./$(DEPDIR)/BookmarkService.Po
include ./$(DEPDIR)/BubbleManager.Po
include ./$(DEPDIR)/CharMgrService.Po
include ./$(DEPDIR)/CharacterDB.Po
include ./$(DEPDIR)/CharacterService.Po
include ./$(DEPDIR)/Client.Po
include ./$(DEPDIR)/ClientSession.Po
include ./$(DEPDIR)/CommandDB.Po
include ./$(DEPDIR)/CommandDispatcher.Po
include ./$(DEPDIR)/ConfigDB.Po
include ./$(DEPDIR)/ConfigService.Po
include ./$(DEPDIR)/CorpMgrService.Po
include ./$(DEPDIR)/CorpRegistryService.Po
include ./$(DEPDIR)/CorpStationMgrService.Po
include ./$(DEPDIR)/CorporationDB.Po
include ./$(DEPDIR)/CorporationService.Po
include ./$(DEPDIR)/Damage.Po
include ./$(DEPDIR)/DestinyManager.Po
include ./$(DEPDIR)/DogmaIMDB.Po
include ./$(DEPDIR)/DogmaIMService.Po
include ./$(DEPDIR)/DungeonService.Po
include ./$(DEPDIR)/EVEmuServerConfig.Po
include ./$(DEPDIR)/EntityList.Po
include ./$(DEPDIR)/FactoryDB.Po
include ./$(DEPDIR)/FactoryService.Po
include ./$(DEPDIR)/GMCommands.Po
include ./$(DEPDIR)/InsuranceService.Po
include ./$(DEPDIR)/InvBrokerService.Po
include ./$(DEPDIR)/InventoryDB.Po
include ./$(DEPDIR)/InventoryItem.Po
include ./$(DEPDIR)/ItemDB.Po
include ./$(DEPDIR)/ItemFactory.Po
include ./$(DEPDIR)/JumpCloneService.Po
include ./$(DEPDIR)/KeeperService.Po
include ./$(DEPDIR)/LSCChannel.Po
include ./$(DEPDIR)/LSCDB.Po
include ./$(DEPDIR)/LSCService.Po
include ./$(DEPDIR)/LanguageService.Po
include ./$(DEPDIR)/LookupService.Po
include ./$(DEPDIR)/MapDB.Po
include ./$(DEPDIR)/MapService.Po
include ./$(DEPDIR)/MarketDB.Po
include ./$(DEPDIR)/MarketProxyService.Po
include ./$(DEPDIR)/MiningCommands.Po
include ./$(DEPDIR)/MiningDB.Po
include ./$(DEPDIR)/MissionDB.Po
include ./$(DEPDIR)/MissionMgrService.Po
include ./$(DEPDIR)/ModuleManager.Po
include ./$(DEPDIR)/NPC.Po
include ./$(DEPDIR)/NPCAI.Po
include ./$(DEPDIR)/ObjCacheDB.Po
include ./$(DEPDIR)/ObjCacheService.Po
include ./$(DEPDIR)/OnlineStatusService.Po
include ./$(DEPDIR)/PetitionerService.Po
include ./$(DEPDIR)/PyBoundObject.Po
include ./$(DEPDIR)/PyCallable.Po
include ./$(DEPDIR)/PyService.Po
include ./$(DEPDIR)/PyServiceMgr.Po
include ./$(DEPDIR)/RamProxyDB.Po
include ./$(DEPDIR)/RamProxyService.Po
include ./$(DEPDIR)/ReprocessingDB.Po
include ./$(DEPDIR)/ReprocessingService.Po
include ./$(DEPDIR)/ScenarioService.Po
include ./$(DEPDIR)/ServiceDB.Po
include ./$(DEPDIR)/ShipDB.Po
include ./$(DEPDIR)/ShipService.Po
include ./$(DEPDIR)/SkillMgrService.Po
include ./$(DEPDIR)/SlashService.Po
include ./$(DEPDIR)/SpawnDB.Po
include ./$(DEPDIR)/SpawnManager.Po
include ./$(DEPDIR)/Standing2Service.Po
include ./$(DEPDIR)/StandingDB.Po
include ./$(DEPDIR)/StationDB.Po
include ./$(DEPDIR)/StationService.Po
include ./$(DEPDIR)/StationSvcService.Po
include ./$(DEPDIR)/SystemBubble.Po
include ./$(DEPDIR)/SystemDB.Po
include ./$(DEPDIR)/SystemEntities.Po
include ./$(DEPDIR)/SystemEntity.Po
include ./$(DEPDIR)/SystemManager.Po
include ./$(DEPDIR)/TargetManager.Po
include ./$(DEPDIR)/TutorialDB.Po
include ./$(DEPDIR)/TutorialService.Po
include ./$(DEPDIR)/main.Po

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	if $(LTCXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

AccountDB.o: account/AccountDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AccountDB.o -MD -MP -MF "$(DEPDIR)/AccountDB.Tpo" -c -o AccountDB.o `test -f 'account/AccountDB.cpp' || echo '$(srcdir)/'`account/AccountDB.cpp; \
	then mv -f "$(DEPDIR)/AccountDB.Tpo" "$(DEPDIR)/AccountDB.Po"; else rm -f "$(DEPDIR)/AccountDB.Tpo"; exit 1; fi
#	source='account/AccountDB.cpp' object='AccountDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AccountDB.o `test -f 'account/AccountDB.cpp' || echo '$(srcdir)/'`account/AccountDB.cpp

AccountDB.obj: account/AccountDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AccountDB.obj -MD -MP -MF "$(DEPDIR)/AccountDB.Tpo" -c -o AccountDB.obj `if test -f 'account/AccountDB.cpp'; then $(CYGPATH_W) 'account/AccountDB.cpp'; else $(CYGPATH_W) '$(srcdir)/account/AccountDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/AccountDB.Tpo" "$(DEPDIR)/AccountDB.Po"; else rm -f "$(DEPDIR)/AccountDB.Tpo"; exit 1; fi
#	source='account/AccountDB.cpp' object='AccountDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AccountDB.obj `if test -f 'account/AccountDB.cpp'; then $(CYGPATH_W) 'account/AccountDB.cpp'; else $(CYGPATH_W) '$(srcdir)/account/AccountDB.cpp'; fi`

AccountService.o: account/AccountService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AccountService.o -MD -MP -MF "$(DEPDIR)/AccountService.Tpo" -c -o AccountService.o `test -f 'account/AccountService.cpp' || echo '$(srcdir)/'`account/AccountService.cpp; \
	then mv -f "$(DEPDIR)/AccountService.Tpo" "$(DEPDIR)/AccountService.Po"; else rm -f "$(DEPDIR)/AccountService.Tpo"; exit 1; fi
#	source='account/AccountService.cpp' object='AccountService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AccountService.o `test -f 'account/AccountService.cpp' || echo '$(srcdir)/'`account/AccountService.cpp

AccountService.obj: account/AccountService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AccountService.obj -MD -MP -MF "$(DEPDIR)/AccountService.Tpo" -c -o AccountService.obj `if test -f 'account/AccountService.cpp'; then $(CYGPATH_W) 'account/AccountService.cpp'; else $(CYGPATH_W) '$(srcdir)/account/AccountService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/AccountService.Tpo" "$(DEPDIR)/AccountService.Po"; else rm -f "$(DEPDIR)/AccountService.Tpo"; exit 1; fi
#	source='account/AccountService.cpp' object='AccountService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AccountService.obj `if test -f 'account/AccountService.cpp'; then $(CYGPATH_W) 'account/AccountService.cpp'; else $(CYGPATH_W) '$(srcdir)/account/AccountService.cpp'; fi`

AuthService.o: account/AuthService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AuthService.o -MD -MP -MF "$(DEPDIR)/AuthService.Tpo" -c -o AuthService.o `test -f 'account/AuthService.cpp' || echo '$(srcdir)/'`account/AuthService.cpp; \
	then mv -f "$(DEPDIR)/AuthService.Tpo" "$(DEPDIR)/AuthService.Po"; else rm -f "$(DEPDIR)/AuthService.Tpo"; exit 1; fi
#	source='account/AuthService.cpp' object='AuthService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AuthService.o `test -f 'account/AuthService.cpp' || echo '$(srcdir)/'`account/AuthService.cpp

AuthService.obj: account/AuthService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AuthService.obj -MD -MP -MF "$(DEPDIR)/AuthService.Tpo" -c -o AuthService.obj `if test -f 'account/AuthService.cpp'; then $(CYGPATH_W) 'account/AuthService.cpp'; else $(CYGPATH_W) '$(srcdir)/account/AuthService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/AuthService.Tpo" "$(DEPDIR)/AuthService.Po"; else rm -f "$(DEPDIR)/AuthService.Tpo"; exit 1; fi
#	source='account/AuthService.cpp' object='AuthService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AuthService.obj `if test -f 'account/AuthService.cpp'; then $(CYGPATH_W) 'account/AuthService.cpp'; else $(CYGPATH_W) '$(srcdir)/account/AuthService.cpp'; fi`

AlertService.o: admin/AlertService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AlertService.o -MD -MP -MF "$(DEPDIR)/AlertService.Tpo" -c -o AlertService.o `test -f 'admin/AlertService.cpp' || echo '$(srcdir)/'`admin/AlertService.cpp; \
	then mv -f "$(DEPDIR)/AlertService.Tpo" "$(DEPDIR)/AlertService.Po"; else rm -f "$(DEPDIR)/AlertService.Tpo"; exit 1; fi
#	source='admin/AlertService.cpp' object='AlertService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AlertService.o `test -f 'admin/AlertService.cpp' || echo '$(srcdir)/'`admin/AlertService.cpp

AlertService.obj: admin/AlertService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AlertService.obj -MD -MP -MF "$(DEPDIR)/AlertService.Tpo" -c -o AlertService.obj `if test -f 'admin/AlertService.cpp'; then $(CYGPATH_W) 'admin/AlertService.cpp'; else $(CYGPATH_W) '$(srcdir)/admin/AlertService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/AlertService.Tpo" "$(DEPDIR)/AlertService.Po"; else rm -f "$(DEPDIR)/AlertService.Tpo"; exit 1; fi
#	source='admin/AlertService.cpp' object='AlertService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AlertService.obj `if test -f 'admin/AlertService.cpp'; then $(CYGPATH_W) 'admin/AlertService.cpp'; else $(CYGPATH_W) '$(srcdir)/admin/AlertService.cpp'; fi`

AllCommands.o: admin/AllCommands.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AllCommands.o -MD -MP -MF "$(DEPDIR)/AllCommands.Tpo" -c -o AllCommands.o `test -f 'admin/AllCommands.cpp' || echo '$(srcdir)/'`admin/AllCommands.cpp; \
	then mv -f "$(DEPDIR)/AllCommands.Tpo" "$(DEPDIR)/AllCommands.Po"; else rm -f "$(DEPDIR)/AllCommands.Tpo"; exit 1; fi
#	source='admin/AllCommands.cpp' object='AllCommands.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AllCommands.o `test -f 'admin/AllCommands.cpp' || echo '$(srcdir)/'`admin/AllCommands.cpp

AllCommands.obj: admin/AllCommands.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AllCommands.obj -MD -MP -MF "$(DEPDIR)/AllCommands.Tpo" -c -o AllCommands.obj `if test -f 'admin/AllCommands.cpp'; then $(CYGPATH_W) 'admin/AllCommands.cpp'; else $(CYGPATH_W) '$(srcdir)/admin/AllCommands.cpp'; fi`; \
	then mv -f "$(DEPDIR)/AllCommands.Tpo" "$(DEPDIR)/AllCommands.Po"; else rm -f "$(DEPDIR)/AllCommands.Tpo"; exit 1; fi
#	source='admin/AllCommands.cpp' object='AllCommands.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AllCommands.obj `if test -f 'admin/AllCommands.cpp'; then $(CYGPATH_W) 'admin/AllCommands.cpp'; else $(CYGPATH_W) '$(srcdir)/admin/AllCommands.cpp'; fi`

CommandDB.o: admin/CommandDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CommandDB.o -MD -MP -MF "$(DEPDIR)/CommandDB.Tpo" -c -o CommandDB.o `test -f 'admin/CommandDB.cpp' || echo '$(srcdir)/'`admin/CommandDB.cpp; \
	then mv -f "$(DEPDIR)/CommandDB.Tpo" "$(DEPDIR)/CommandDB.Po"; else rm -f "$(DEPDIR)/CommandDB.Tpo"; exit 1; fi
#	source='admin/CommandDB.cpp' object='CommandDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CommandDB.o `test -f 'admin/CommandDB.cpp' || echo '$(srcdir)/'`admin/CommandDB.cpp

CommandDB.obj: admin/CommandDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CommandDB.obj -MD -MP -MF "$(DEPDIR)/CommandDB.Tpo" -c -o CommandDB.obj `if test -f 'admin/CommandDB.cpp'; then $(CYGPATH_W) 'admin/CommandDB.cpp'; else $(CYGPATH_W) '$(srcdir)/admin/CommandDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CommandDB.Tpo" "$(DEPDIR)/CommandDB.Po"; else rm -f "$(DEPDIR)/CommandDB.Tpo"; exit 1; fi
#	source='admin/CommandDB.cpp' object='CommandDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CommandDB.obj `if test -f 'admin/CommandDB.cpp'; then $(CYGPATH_W) 'admin/CommandDB.cpp'; else $(CYGPATH_W) '$(srcdir)/admin/CommandDB.cpp'; fi`

CommandDispatcher.o: admin/CommandDispatcher.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CommandDispatcher.o -MD -MP -MF "$(DEPDIR)/CommandDispatcher.Tpo" -c -o CommandDispatcher.o `test -f 'admin/CommandDispatcher.cpp' || echo '$(srcdir)/'`admin/CommandDispatcher.cpp; \
	then mv -f "$(DEPDIR)/CommandDispatcher.Tpo" "$(DEPDIR)/CommandDispatcher.Po"; else rm -f "$(DEPDIR)/CommandDispatcher.Tpo"; exit 1; fi
#	source='admin/CommandDispatcher.cpp' object='CommandDispatcher.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CommandDispatcher.o `test -f 'admin/CommandDispatcher.cpp' || echo '$(srcdir)/'`admin/CommandDispatcher.cpp

CommandDispatcher.obj: admin/CommandDispatcher.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CommandDispatcher.obj -MD -MP -MF "$(DEPDIR)/CommandDispatcher.Tpo" -c -o CommandDispatcher.obj `if test -f 'admin/CommandDispatcher.cpp'; then $(CYGPATH_W) 'admin/CommandDispatcher.cpp'; else $(CYGPATH_W) '$(srcdir)/admin/CommandDispatcher.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CommandDispatcher.Tpo" "$(DEPDIR)/CommandDispatcher.Po"; else rm -f "$(DEPDIR)/CommandDispatcher.Tpo"; exit 1; fi
#	source='admin/CommandDispatcher.cpp' object='CommandDispatcher.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CommandDispatcher.obj `if test -f 'admin/CommandDispatcher.cpp'; then $(CYGPATH_W) 'admin/CommandDispatcher.cpp'; else $(CYGPATH_W) '$(srcdir)/admin/CommandDispatcher.cpp'; fi`

GMCommands.o: admin/GMCommands.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GMCommands.o -MD -MP -MF "$(DEPDIR)/GMCommands.Tpo" -c -o GMCommands.o `test -f 'admin/GMCommands.cpp' || echo '$(srcdir)/'`admin/GMCommands.cpp; \
	then mv -f "$(DEPDIR)/GMCommands.Tpo" "$(DEPDIR)/GMCommands.Po"; else rm -f "$(DEPDIR)/GMCommands.Tpo"; exit 1; fi
#	source='admin/GMCommands.cpp' object='GMCommands.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GMCommands.o `test -f 'admin/GMCommands.cpp' || echo '$(srcdir)/'`admin/GMCommands.cpp

GMCommands.obj: admin/GMCommands.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GMCommands.obj -MD -MP -MF "$(DEPDIR)/GMCommands.Tpo" -c -o GMCommands.obj `if test -f 'admin/GMCommands.cpp'; then $(CYGPATH_W) 'admin/GMCommands.cpp'; else $(CYGPATH_W) '$(srcdir)/admin/GMCommands.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GMCommands.Tpo" "$(DEPDIR)/GMCommands.Po"; else rm -f "$(DEPDIR)/GMCommands.Tpo"; exit 1; fi
#	source='admin/GMCommands.cpp' object='GMCommands.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GMCommands.obj `if test -f 'admin/GMCommands.cpp'; then $(CYGPATH_W) 'admin/GMCommands.cpp'; else $(CYGPATH_W) '$(srcdir)/admin/GMCommands.cpp'; fi`

PetitionerService.o: admin/PetitionerService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PetitionerService.o -MD -MP -MF "$(DEPDIR)/PetitionerService.Tpo" -c -o PetitionerService.o `test -f 'admin/PetitionerService.cpp' || echo '$(srcdir)/'`admin/PetitionerService.cpp; \
	then mv -f "$(DEPDIR)/PetitionerService.Tpo" "$(DEPDIR)/PetitionerService.Po"; else rm -f "$(DEPDIR)/PetitionerService.Tpo"; exit 1; fi
#	source='admin/PetitionerService.cpp' object='PetitionerService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PetitionerService.o `test -f 'admin/PetitionerService.cpp' || echo '$(srcdir)/'`admin/PetitionerService.cpp

PetitionerService.obj: admin/PetitionerService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PetitionerService.obj -MD -MP -MF "$(DEPDIR)/PetitionerService.Tpo" -c -o PetitionerService.obj `if test -f 'admin/PetitionerService.cpp'; then $(CYGPATH_W) 'admin/PetitionerService.cpp'; else $(CYGPATH_W) '$(srcdir)/admin/PetitionerService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/PetitionerService.Tpo" "$(DEPDIR)/PetitionerService.Po"; else rm -f "$(DEPDIR)/PetitionerService.Tpo"; exit 1; fi
#	source='admin/PetitionerService.cpp' object='PetitionerService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PetitionerService.obj `if test -f 'admin/PetitionerService.cpp'; then $(CYGPATH_W) 'admin/PetitionerService.cpp'; else $(CYGPATH_W) '$(srcdir)/admin/PetitionerService.cpp'; fi`

SlashService.o: admin/SlashService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SlashService.o -MD -MP -MF "$(DEPDIR)/SlashService.Tpo" -c -o SlashService.o `test -f 'admin/SlashService.cpp' || echo '$(srcdir)/'`admin/SlashService.cpp; \
	then mv -f "$(DEPDIR)/SlashService.Tpo" "$(DEPDIR)/SlashService.Po"; else rm -f "$(DEPDIR)/SlashService.Tpo"; exit 1; fi
#	source='admin/SlashService.cpp' object='SlashService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SlashService.o `test -f 'admin/SlashService.cpp' || echo '$(srcdir)/'`admin/SlashService.cpp

SlashService.obj: admin/SlashService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SlashService.obj -MD -MP -MF "$(DEPDIR)/SlashService.Tpo" -c -o SlashService.obj `if test -f 'admin/SlashService.cpp'; then $(CYGPATH_W) 'admin/SlashService.cpp'; else $(CYGPATH_W) '$(srcdir)/admin/SlashService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SlashService.Tpo" "$(DEPDIR)/SlashService.Po"; else rm -f "$(DEPDIR)/SlashService.Tpo"; exit 1; fi
#	source='admin/SlashService.cpp' object='SlashService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SlashService.obj `if test -f 'admin/SlashService.cpp'; then $(CYGPATH_W) 'admin/SlashService.cpp'; else $(CYGPATH_W) '$(srcdir)/admin/SlashService.cpp'; fi`

ObjCacheDB.o: cache/ObjCacheDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ObjCacheDB.o -MD -MP -MF "$(DEPDIR)/ObjCacheDB.Tpo" -c -o ObjCacheDB.o `test -f 'cache/ObjCacheDB.cpp' || echo '$(srcdir)/'`cache/ObjCacheDB.cpp; \
	then mv -f "$(DEPDIR)/ObjCacheDB.Tpo" "$(DEPDIR)/ObjCacheDB.Po"; else rm -f "$(DEPDIR)/ObjCacheDB.Tpo"; exit 1; fi
#	source='cache/ObjCacheDB.cpp' object='ObjCacheDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ObjCacheDB.o `test -f 'cache/ObjCacheDB.cpp' || echo '$(srcdir)/'`cache/ObjCacheDB.cpp

ObjCacheDB.obj: cache/ObjCacheDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ObjCacheDB.obj -MD -MP -MF "$(DEPDIR)/ObjCacheDB.Tpo" -c -o ObjCacheDB.obj `if test -f 'cache/ObjCacheDB.cpp'; then $(CYGPATH_W) 'cache/ObjCacheDB.cpp'; else $(CYGPATH_W) '$(srcdir)/cache/ObjCacheDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ObjCacheDB.Tpo" "$(DEPDIR)/ObjCacheDB.Po"; else rm -f "$(DEPDIR)/ObjCacheDB.Tpo"; exit 1; fi
#	source='cache/ObjCacheDB.cpp' object='ObjCacheDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ObjCacheDB.obj `if test -f 'cache/ObjCacheDB.cpp'; then $(CYGPATH_W) 'cache/ObjCacheDB.cpp'; else $(CYGPATH_W) '$(srcdir)/cache/ObjCacheDB.cpp'; fi`

ObjCacheService.o: cache/ObjCacheService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ObjCacheService.o -MD -MP -MF "$(DEPDIR)/ObjCacheService.Tpo" -c -o ObjCacheService.o `test -f 'cache/ObjCacheService.cpp' || echo '$(srcdir)/'`cache/ObjCacheService.cpp; \
	then mv -f "$(DEPDIR)/ObjCacheService.Tpo" "$(DEPDIR)/ObjCacheService.Po"; else rm -f "$(DEPDIR)/ObjCacheService.Tpo"; exit 1; fi
#	source='cache/ObjCacheService.cpp' object='ObjCacheService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ObjCacheService.o `test -f 'cache/ObjCacheService.cpp' || echo '$(srcdir)/'`cache/ObjCacheService.cpp

ObjCacheService.obj: cache/ObjCacheService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ObjCacheService.obj -MD -MP -MF "$(DEPDIR)/ObjCacheService.Tpo" -c -o ObjCacheService.obj `if test -f 'cache/ObjCacheService.cpp'; then $(CYGPATH_W) 'cache/ObjCacheService.cpp'; else $(CYGPATH_W) '$(srcdir)/cache/ObjCacheService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ObjCacheService.Tpo" "$(DEPDIR)/ObjCacheService.Po"; else rm -f "$(DEPDIR)/ObjCacheService.Tpo"; exit 1; fi
#	source='cache/ObjCacheService.cpp' object='ObjCacheService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ObjCacheService.obj `if test -f 'cache/ObjCacheService.cpp'; then $(CYGPATH_W) 'cache/ObjCacheService.cpp'; else $(CYGPATH_W) '$(srcdir)/cache/ObjCacheService.cpp'; fi`

CharacterDB.o: character/CharacterDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CharacterDB.o -MD -MP -MF "$(DEPDIR)/CharacterDB.Tpo" -c -o CharacterDB.o `test -f 'character/CharacterDB.cpp' || echo '$(srcdir)/'`character/CharacterDB.cpp; \
	then mv -f "$(DEPDIR)/CharacterDB.Tpo" "$(DEPDIR)/CharacterDB.Po"; else rm -f "$(DEPDIR)/CharacterDB.Tpo"; exit 1; fi
#	source='character/CharacterDB.cpp' object='CharacterDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CharacterDB.o `test -f 'character/CharacterDB.cpp' || echo '$(srcdir)/'`character/CharacterDB.cpp

CharacterDB.obj: character/CharacterDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CharacterDB.obj -MD -MP -MF "$(DEPDIR)/CharacterDB.Tpo" -c -o CharacterDB.obj `if test -f 'character/CharacterDB.cpp'; then $(CYGPATH_W) 'character/CharacterDB.cpp'; else $(CYGPATH_W) '$(srcdir)/character/CharacterDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CharacterDB.Tpo" "$(DEPDIR)/CharacterDB.Po"; else rm -f "$(DEPDIR)/CharacterDB.Tpo"; exit 1; fi
#	source='character/CharacterDB.cpp' object='CharacterDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CharacterDB.obj `if test -f 'character/CharacterDB.cpp'; then $(CYGPATH_W) 'character/CharacterDB.cpp'; else $(CYGPATH_W) '$(srcdir)/character/CharacterDB.cpp'; fi`

CharacterService.o: character/CharacterService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CharacterService.o -MD -MP -MF "$(DEPDIR)/CharacterService.Tpo" -c -o CharacterService.o `test -f 'character/CharacterService.cpp' || echo '$(srcdir)/'`character/CharacterService.cpp; \
	then mv -f "$(DEPDIR)/CharacterService.Tpo" "$(DEPDIR)/CharacterService.Po"; else rm -f "$(DEPDIR)/CharacterService.Tpo"; exit 1; fi
#	source='character/CharacterService.cpp' object='CharacterService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CharacterService.o `test -f 'character/CharacterService.cpp' || echo '$(srcdir)/'`character/CharacterService.cpp

CharacterService.obj: character/CharacterService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CharacterService.obj -MD -MP -MF "$(DEPDIR)/CharacterService.Tpo" -c -o CharacterService.obj `if test -f 'character/CharacterService.cpp'; then $(CYGPATH_W) 'character/CharacterService.cpp'; else $(CYGPATH_W) '$(srcdir)/character/CharacterService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CharacterService.Tpo" "$(DEPDIR)/CharacterService.Po"; else rm -f "$(DEPDIR)/CharacterService.Tpo"; exit 1; fi
#	source='character/CharacterService.cpp' object='CharacterService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CharacterService.obj `if test -f 'character/CharacterService.cpp'; then $(CYGPATH_W) 'character/CharacterService.cpp'; else $(CYGPATH_W) '$(srcdir)/character/CharacterService.cpp'; fi`

CharMgrService.o: character/CharMgrService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CharMgrService.o -MD -MP -MF "$(DEPDIR)/CharMgrService.Tpo" -c -o CharMgrService.o `test -f 'character/CharMgrService.cpp' || echo '$(srcdir)/'`character/CharMgrService.cpp; \
	then mv -f "$(DEPDIR)/CharMgrService.Tpo" "$(DEPDIR)/CharMgrService.Po"; else rm -f "$(DEPDIR)/CharMgrService.Tpo"; exit 1; fi
#	source='character/CharMgrService.cpp' object='CharMgrService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CharMgrService.o `test -f 'character/CharMgrService.cpp' || echo '$(srcdir)/'`character/CharMgrService.cpp

CharMgrService.obj: character/CharMgrService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CharMgrService.obj -MD -MP -MF "$(DEPDIR)/CharMgrService.Tpo" -c -o CharMgrService.obj `if test -f 'character/CharMgrService.cpp'; then $(CYGPATH_W) 'character/CharMgrService.cpp'; else $(CYGPATH_W) '$(srcdir)/character/CharMgrService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CharMgrService.Tpo" "$(DEPDIR)/CharMgrService.Po"; else rm -f "$(DEPDIR)/CharMgrService.Tpo"; exit 1; fi
#	source='character/CharMgrService.cpp' object='CharMgrService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CharMgrService.obj `if test -f 'character/CharMgrService.cpp'; then $(CYGPATH_W) 'character/CharMgrService.cpp'; else $(CYGPATH_W) '$(srcdir)/character/CharMgrService.cpp'; fi`

SkillMgrService.o: character/SkillMgrService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SkillMgrService.o -MD -MP -MF "$(DEPDIR)/SkillMgrService.Tpo" -c -o SkillMgrService.o `test -f 'character/SkillMgrService.cpp' || echo '$(srcdir)/'`character/SkillMgrService.cpp; \
	then mv -f "$(DEPDIR)/SkillMgrService.Tpo" "$(DEPDIR)/SkillMgrService.Po"; else rm -f "$(DEPDIR)/SkillMgrService.Tpo"; exit 1; fi
#	source='character/SkillMgrService.cpp' object='SkillMgrService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SkillMgrService.o `test -f 'character/SkillMgrService.cpp' || echo '$(srcdir)/'`character/SkillMgrService.cpp

SkillMgrService.obj: character/SkillMgrService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SkillMgrService.obj -MD -MP -MF "$(DEPDIR)/SkillMgrService.Tpo" -c -o SkillMgrService.obj `if test -f 'character/SkillMgrService.cpp'; then $(CYGPATH_W) 'character/SkillMgrService.cpp'; else $(CYGPATH_W) '$(srcdir)/character/SkillMgrService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SkillMgrService.Tpo" "$(DEPDIR)/SkillMgrService.Po"; else rm -f "$(DEPDIR)/SkillMgrService.Tpo"; exit 1; fi
#	source='character/SkillMgrService.cpp' object='SkillMgrService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SkillMgrService.obj `if test -f 'character/SkillMgrService.cpp'; then $(CYGPATH_W) 'character/SkillMgrService.cpp'; else $(CYGPATH_W) '$(srcdir)/character/SkillMgrService.cpp'; fi`

LookupService.o: chat/LookupService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LookupService.o -MD -MP -MF "$(DEPDIR)/LookupService.Tpo" -c -o LookupService.o `test -f 'chat/LookupService.cpp' || echo '$(srcdir)/'`chat/LookupService.cpp; \
	then mv -f "$(DEPDIR)/LookupService.Tpo" "$(DEPDIR)/LookupService.Po"; else rm -f "$(DEPDIR)/LookupService.Tpo"; exit 1; fi
#	source='chat/LookupService.cpp' object='LookupService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LookupService.o `test -f 'chat/LookupService.cpp' || echo '$(srcdir)/'`chat/LookupService.cpp

LookupService.obj: chat/LookupService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LookupService.obj -MD -MP -MF "$(DEPDIR)/LookupService.Tpo" -c -o LookupService.obj `if test -f 'chat/LookupService.cpp'; then $(CYGPATH_W) 'chat/LookupService.cpp'; else $(CYGPATH_W) '$(srcdir)/chat/LookupService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/LookupService.Tpo" "$(DEPDIR)/LookupService.Po"; else rm -f "$(DEPDIR)/LookupService.Tpo"; exit 1; fi
#	source='chat/LookupService.cpp' object='LookupService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LookupService.obj `if test -f 'chat/LookupService.cpp'; then $(CYGPATH_W) 'chat/LookupService.cpp'; else $(CYGPATH_W) '$(srcdir)/chat/LookupService.cpp'; fi`

LSCChannel.o: chat/LSCChannel.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LSCChannel.o -MD -MP -MF "$(DEPDIR)/LSCChannel.Tpo" -c -o LSCChannel.o `test -f 'chat/LSCChannel.cpp' || echo '$(srcdir)/'`chat/LSCChannel.cpp; \
	then mv -f "$(DEPDIR)/LSCChannel.Tpo" "$(DEPDIR)/LSCChannel.Po"; else rm -f "$(DEPDIR)/LSCChannel.Tpo"; exit 1; fi
#	source='chat/LSCChannel.cpp' object='LSCChannel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LSCChannel.o `test -f 'chat/LSCChannel.cpp' || echo '$(srcdir)/'`chat/LSCChannel.cpp

LSCChannel.obj: chat/LSCChannel.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LSCChannel.obj -MD -MP -MF "$(DEPDIR)/LSCChannel.Tpo" -c -o LSCChannel.obj `if test -f 'chat/LSCChannel.cpp'; then $(CYGPATH_W) 'chat/LSCChannel.cpp'; else $(CYGPATH_W) '$(srcdir)/chat/LSCChannel.cpp'; fi`; \
	then mv -f "$(DEPDIR)/LSCChannel.Tpo" "$(DEPDIR)/LSCChannel.Po"; else rm -f "$(DEPDIR)/LSCChannel.Tpo"; exit 1; fi
#	source='chat/LSCChannel.cpp' object='LSCChannel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LSCChannel.obj `if test -f 'chat/LSCChannel.cpp'; then $(CYGPATH_W) 'chat/LSCChannel.cpp'; else $(CYGPATH_W) '$(srcdir)/chat/LSCChannel.cpp'; fi`

LSCDB.o: chat/LSCDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LSCDB.o -MD -MP -MF "$(DEPDIR)/LSCDB.Tpo" -c -o LSCDB.o `test -f 'chat/LSCDB.cpp' || echo '$(srcdir)/'`chat/LSCDB.cpp; \
	then mv -f "$(DEPDIR)/LSCDB.Tpo" "$(DEPDIR)/LSCDB.Po"; else rm -f "$(DEPDIR)/LSCDB.Tpo"; exit 1; fi
#	source='chat/LSCDB.cpp' object='LSCDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LSCDB.o `test -f 'chat/LSCDB.cpp' || echo '$(srcdir)/'`chat/LSCDB.cpp

LSCDB.obj: chat/LSCDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LSCDB.obj -MD -MP -MF "$(DEPDIR)/LSCDB.Tpo" -c -o LSCDB.obj `if test -f 'chat/LSCDB.cpp'; then $(CYGPATH_W) 'chat/LSCDB.cpp'; else $(CYGPATH_W) '$(srcdir)/chat/LSCDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/LSCDB.Tpo" "$(DEPDIR)/LSCDB.Po"; else rm -f "$(DEPDIR)/LSCDB.Tpo"; exit 1; fi
#	source='chat/LSCDB.cpp' object='LSCDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LSCDB.obj `if test -f 'chat/LSCDB.cpp'; then $(CYGPATH_W) 'chat/LSCDB.cpp'; else $(CYGPATH_W) '$(srcdir)/chat/LSCDB.cpp'; fi`

LSCService.o: chat/LSCService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LSCService.o -MD -MP -MF "$(DEPDIR)/LSCService.Tpo" -c -o LSCService.o `test -f 'chat/LSCService.cpp' || echo '$(srcdir)/'`chat/LSCService.cpp; \
	then mv -f "$(DEPDIR)/LSCService.Tpo" "$(DEPDIR)/LSCService.Po"; else rm -f "$(DEPDIR)/LSCService.Tpo"; exit 1; fi
#	source='chat/LSCService.cpp' object='LSCService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LSCService.o `test -f 'chat/LSCService.cpp' || echo '$(srcdir)/'`chat/LSCService.cpp

LSCService.obj: chat/LSCService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LSCService.obj -MD -MP -MF "$(DEPDIR)/LSCService.Tpo" -c -o LSCService.obj `if test -f 'chat/LSCService.cpp'; then $(CYGPATH_W) 'chat/LSCService.cpp'; else $(CYGPATH_W) '$(srcdir)/chat/LSCService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/LSCService.Tpo" "$(DEPDIR)/LSCService.Po"; else rm -f "$(DEPDIR)/LSCService.Tpo"; exit 1; fi
#	source='chat/LSCService.cpp' object='LSCService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LSCService.obj `if test -f 'chat/LSCService.cpp'; then $(CYGPATH_W) 'chat/LSCService.cpp'; else $(CYGPATH_W) '$(srcdir)/chat/LSCService.cpp'; fi`

OnlineStatusService.o: chat/OnlineStatusService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT OnlineStatusService.o -MD -MP -MF "$(DEPDIR)/OnlineStatusService.Tpo" -c -o OnlineStatusService.o `test -f 'chat/OnlineStatusService.cpp' || echo '$(srcdir)/'`chat/OnlineStatusService.cpp; \
	then mv -f "$(DEPDIR)/OnlineStatusService.Tpo" "$(DEPDIR)/OnlineStatusService.Po"; else rm -f "$(DEPDIR)/OnlineStatusService.Tpo"; exit 1; fi
#	source='chat/OnlineStatusService.cpp' object='OnlineStatusService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o OnlineStatusService.o `test -f 'chat/OnlineStatusService.cpp' || echo '$(srcdir)/'`chat/OnlineStatusService.cpp

OnlineStatusService.obj: chat/OnlineStatusService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT OnlineStatusService.obj -MD -MP -MF "$(DEPDIR)/OnlineStatusService.Tpo" -c -o OnlineStatusService.obj `if test -f 'chat/OnlineStatusService.cpp'; then $(CYGPATH_W) 'chat/OnlineStatusService.cpp'; else $(CYGPATH_W) '$(srcdir)/chat/OnlineStatusService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/OnlineStatusService.Tpo" "$(DEPDIR)/OnlineStatusService.Po"; else rm -f "$(DEPDIR)/OnlineStatusService.Tpo"; exit 1; fi
#	source='chat/OnlineStatusService.cpp' object='OnlineStatusService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o OnlineStatusService.obj `if test -f 'chat/OnlineStatusService.cpp'; then $(CYGPATH_W) 'chat/OnlineStatusService.cpp'; else $(CYGPATH_W) '$(srcdir)/chat/OnlineStatusService.cpp'; fi`

ConfigDB.o: config/ConfigDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ConfigDB.o -MD -MP -MF "$(DEPDIR)/ConfigDB.Tpo" -c -o ConfigDB.o `test -f 'config/ConfigDB.cpp' || echo '$(srcdir)/'`config/ConfigDB.cpp; \
	then mv -f "$(DEPDIR)/ConfigDB.Tpo" "$(DEPDIR)/ConfigDB.Po"; else rm -f "$(DEPDIR)/ConfigDB.Tpo"; exit 1; fi
#	source='config/ConfigDB.cpp' object='ConfigDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ConfigDB.o `test -f 'config/ConfigDB.cpp' || echo '$(srcdir)/'`config/ConfigDB.cpp

ConfigDB.obj: config/ConfigDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ConfigDB.obj -MD -MP -MF "$(DEPDIR)/ConfigDB.Tpo" -c -o ConfigDB.obj `if test -f 'config/ConfigDB.cpp'; then $(CYGPATH_W) 'config/ConfigDB.cpp'; else $(CYGPATH_W) '$(srcdir)/config/ConfigDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ConfigDB.Tpo" "$(DEPDIR)/ConfigDB.Po"; else rm -f "$(DEPDIR)/ConfigDB.Tpo"; exit 1; fi
#	source='config/ConfigDB.cpp' object='ConfigDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ConfigDB.obj `if test -f 'config/ConfigDB.cpp'; then $(CYGPATH_W) 'config/ConfigDB.cpp'; else $(CYGPATH_W) '$(srcdir)/config/ConfigDB.cpp'; fi`

ConfigService.o: config/ConfigService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ConfigService.o -MD -MP -MF "$(DEPDIR)/ConfigService.Tpo" -c -o ConfigService.o `test -f 'config/ConfigService.cpp' || echo '$(srcdir)/'`config/ConfigService.cpp; \
	then mv -f "$(DEPDIR)/ConfigService.Tpo" "$(DEPDIR)/ConfigService.Po"; else rm -f "$(DEPDIR)/ConfigService.Tpo"; exit 1; fi
#	source='config/ConfigService.cpp' object='ConfigService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ConfigService.o `test -f 'config/ConfigService.cpp' || echo '$(srcdir)/'`config/ConfigService.cpp

ConfigService.obj: config/ConfigService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ConfigService.obj -MD -MP -MF "$(DEPDIR)/ConfigService.Tpo" -c -o ConfigService.obj `if test -f 'config/ConfigService.cpp'; then $(CYGPATH_W) 'config/ConfigService.cpp'; else $(CYGPATH_W) '$(srcdir)/config/ConfigService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ConfigService.Tpo" "$(DEPDIR)/ConfigService.Po"; else rm -f "$(DEPDIR)/ConfigService.Tpo"; exit 1; fi
#	source='config/ConfigService.cpp' object='ConfigService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ConfigService.obj `if test -f 'config/ConfigService.cpp'; then $(CYGPATH_W) 'config/ConfigService.cpp'; else $(CYGPATH_W) '$(srcdir)/config/ConfigService.cpp'; fi`

LanguageService.o: config/LanguageService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LanguageService.o -MD -MP -MF "$(DEPDIR)/LanguageService.Tpo" -c -o LanguageService.o `test -f 'config/LanguageService.cpp' || echo '$(srcdir)/'`config/LanguageService.cpp; \
	then mv -f "$(DEPDIR)/LanguageService.Tpo" "$(DEPDIR)/LanguageService.Po"; else rm -f "$(DEPDIR)/LanguageService.Tpo"; exit 1; fi
#	source='config/LanguageService.cpp' object='LanguageService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LanguageService.o `test -f 'config/LanguageService.cpp' || echo '$(srcdir)/'`config/LanguageService.cpp

LanguageService.obj: config/LanguageService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LanguageService.obj -MD -MP -MF "$(DEPDIR)/LanguageService.Tpo" -c -o LanguageService.obj `if test -f 'config/LanguageService.cpp'; then $(CYGPATH_W) 'config/LanguageService.cpp'; else $(CYGPATH_W) '$(srcdir)/config/LanguageService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/LanguageService.Tpo" "$(DEPDIR)/LanguageService.Po"; else rm -f "$(DEPDIR)/LanguageService.Tpo"; exit 1; fi
#	source='config/LanguageService.cpp' object='LanguageService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LanguageService.obj `if test -f 'config/LanguageService.cpp'; then $(CYGPATH_W) 'config/LanguageService.cpp'; else $(CYGPATH_W) '$(srcdir)/config/LanguageService.cpp'; fi`

CorpMgrService.o: corporation/CorpMgrService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CorpMgrService.o -MD -MP -MF "$(DEPDIR)/CorpMgrService.Tpo" -c -o CorpMgrService.o `test -f 'corporation/CorpMgrService.cpp' || echo '$(srcdir)/'`corporation/CorpMgrService.cpp; \
	then mv -f "$(DEPDIR)/CorpMgrService.Tpo" "$(DEPDIR)/CorpMgrService.Po"; else rm -f "$(DEPDIR)/CorpMgrService.Tpo"; exit 1; fi
#	source='corporation/CorpMgrService.cpp' object='CorpMgrService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CorpMgrService.o `test -f 'corporation/CorpMgrService.cpp' || echo '$(srcdir)/'`corporation/CorpMgrService.cpp

CorpMgrService.obj: corporation/CorpMgrService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CorpMgrService.obj -MD -MP -MF "$(DEPDIR)/CorpMgrService.Tpo" -c -o CorpMgrService.obj `if test -f 'corporation/CorpMgrService.cpp'; then $(CYGPATH_W) 'corporation/CorpMgrService.cpp'; else $(CYGPATH_W) '$(srcdir)/corporation/CorpMgrService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CorpMgrService.Tpo" "$(DEPDIR)/CorpMgrService.Po"; else rm -f "$(DEPDIR)/CorpMgrService.Tpo"; exit 1; fi
#	source='corporation/CorpMgrService.cpp' object='CorpMgrService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CorpMgrService.obj `if test -f 'corporation/CorpMgrService.cpp'; then $(CYGPATH_W) 'corporation/CorpMgrService.cpp'; else $(CYGPATH_W) '$(srcdir)/corporation/CorpMgrService.cpp'; fi`

CorporationDB.o: corporation/CorporationDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CorporationDB.o -MD -MP -MF "$(DEPDIR)/CorporationDB.Tpo" -c -o CorporationDB.o `test -f 'corporation/CorporationDB.cpp' || echo '$(srcdir)/'`corporation/CorporationDB.cpp; \
	then mv -f "$(DEPDIR)/CorporationDB.Tpo" "$(DEPDIR)/CorporationDB.Po"; else rm -f "$(DEPDIR)/CorporationDB.Tpo"; exit 1; fi
#	source='corporation/CorporationDB.cpp' object='CorporationDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CorporationDB.o `test -f 'corporation/CorporationDB.cpp' || echo '$(srcdir)/'`corporation/CorporationDB.cpp

CorporationDB.obj: corporation/CorporationDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CorporationDB.obj -MD -MP -MF "$(DEPDIR)/CorporationDB.Tpo" -c -o CorporationDB.obj `if test -f 'corporation/CorporationDB.cpp'; then $(CYGPATH_W) 'corporation/CorporationDB.cpp'; else $(CYGPATH_W) '$(srcdir)/corporation/CorporationDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CorporationDB.Tpo" "$(DEPDIR)/CorporationDB.Po"; else rm -f "$(DEPDIR)/CorporationDB.Tpo"; exit 1; fi
#	source='corporation/CorporationDB.cpp' object='CorporationDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CorporationDB.obj `if test -f 'corporation/CorporationDB.cpp'; then $(CYGPATH_W) 'corporation/CorporationDB.cpp'; else $(CYGPATH_W) '$(srcdir)/corporation/CorporationDB.cpp'; fi`

CorporationService.o: corporation/CorporationService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CorporationService.o -MD -MP -MF "$(DEPDIR)/CorporationService.Tpo" -c -o CorporationService.o `test -f 'corporation/CorporationService.cpp' || echo '$(srcdir)/'`corporation/CorporationService.cpp; \
	then mv -f "$(DEPDIR)/CorporationService.Tpo" "$(DEPDIR)/CorporationService.Po"; else rm -f "$(DEPDIR)/CorporationService.Tpo"; exit 1; fi
#	source='corporation/CorporationService.cpp' object='CorporationService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CorporationService.o `test -f 'corporation/CorporationService.cpp' || echo '$(srcdir)/'`corporation/CorporationService.cpp

CorporationService.obj: corporation/CorporationService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CorporationService.obj -MD -MP -MF "$(DEPDIR)/CorporationService.Tpo" -c -o CorporationService.obj `if test -f 'corporation/CorporationService.cpp'; then $(CYGPATH_W) 'corporation/CorporationService.cpp'; else $(CYGPATH_W) '$(srcdir)/corporation/CorporationService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CorporationService.Tpo" "$(DEPDIR)/CorporationService.Po"; else rm -f "$(DEPDIR)/CorporationService.Tpo"; exit 1; fi
#	source='corporation/CorporationService.cpp' object='CorporationService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CorporationService.obj `if test -f 'corporation/CorporationService.cpp'; then $(CYGPATH_W) 'corporation/CorporationService.cpp'; else $(CYGPATH_W) '$(srcdir)/corporation/CorporationService.cpp'; fi`

CorpRegistryService.o: corporation/CorpRegistryService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CorpRegistryService.o -MD -MP -MF "$(DEPDIR)/CorpRegistryService.Tpo" -c -o CorpRegistryService.o `test -f 'corporation/CorpRegistryService.cpp' || echo '$(srcdir)/'`corporation/CorpRegistryService.cpp; \
	then mv -f "$(DEPDIR)/CorpRegistryService.Tpo" "$(DEPDIR)/CorpRegistryService.Po"; else rm -f "$(DEPDIR)/CorpRegistryService.Tpo"; exit 1; fi
#	source='corporation/CorpRegistryService.cpp' object='CorpRegistryService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CorpRegistryService.o `test -f 'corporation/CorpRegistryService.cpp' || echo '$(srcdir)/'`corporation/CorpRegistryService.cpp

CorpRegistryService.obj: corporation/CorpRegistryService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CorpRegistryService.obj -MD -MP -MF "$(DEPDIR)/CorpRegistryService.Tpo" -c -o CorpRegistryService.obj `if test -f 'corporation/CorpRegistryService.cpp'; then $(CYGPATH_W) 'corporation/CorpRegistryService.cpp'; else $(CYGPATH_W) '$(srcdir)/corporation/CorpRegistryService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CorpRegistryService.Tpo" "$(DEPDIR)/CorpRegistryService.Po"; else rm -f "$(DEPDIR)/CorpRegistryService.Tpo"; exit 1; fi
#	source='corporation/CorpRegistryService.cpp' object='CorpRegistryService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CorpRegistryService.obj `if test -f 'corporation/CorpRegistryService.cpp'; then $(CYGPATH_W) 'corporation/CorpRegistryService.cpp'; else $(CYGPATH_W) '$(srcdir)/corporation/CorpRegistryService.cpp'; fi`

CorpStationMgrService.o: corporation/CorpStationMgrService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CorpStationMgrService.o -MD -MP -MF "$(DEPDIR)/CorpStationMgrService.Tpo" -c -o CorpStationMgrService.o `test -f 'corporation/CorpStationMgrService.cpp' || echo '$(srcdir)/'`corporation/CorpStationMgrService.cpp; \
	then mv -f "$(DEPDIR)/CorpStationMgrService.Tpo" "$(DEPDIR)/CorpStationMgrService.Po"; else rm -f "$(DEPDIR)/CorpStationMgrService.Tpo"; exit 1; fi
#	source='corporation/CorpStationMgrService.cpp' object='CorpStationMgrService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CorpStationMgrService.o `test -f 'corporation/CorpStationMgrService.cpp' || echo '$(srcdir)/'`corporation/CorpStationMgrService.cpp

CorpStationMgrService.obj: corporation/CorpStationMgrService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CorpStationMgrService.obj -MD -MP -MF "$(DEPDIR)/CorpStationMgrService.Tpo" -c -o CorpStationMgrService.obj `if test -f 'corporation/CorpStationMgrService.cpp'; then $(CYGPATH_W) 'corporation/CorpStationMgrService.cpp'; else $(CYGPATH_W) '$(srcdir)/corporation/CorpStationMgrService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CorpStationMgrService.Tpo" "$(DEPDIR)/CorpStationMgrService.Po"; else rm -f "$(DEPDIR)/CorpStationMgrService.Tpo"; exit 1; fi
#	source='corporation/CorpStationMgrService.cpp' object='CorpStationMgrService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CorpStationMgrService.obj `if test -f 'corporation/CorpStationMgrService.cpp'; then $(CYGPATH_W) 'corporation/CorpStationMgrService.cpp'; else $(CYGPATH_W) '$(srcdir)/corporation/CorpStationMgrService.cpp'; fi`

DogmaIMDB.o: dogmaim/DogmaIMDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DogmaIMDB.o -MD -MP -MF "$(DEPDIR)/DogmaIMDB.Tpo" -c -o DogmaIMDB.o `test -f 'dogmaim/DogmaIMDB.cpp' || echo '$(srcdir)/'`dogmaim/DogmaIMDB.cpp; \
	then mv -f "$(DEPDIR)/DogmaIMDB.Tpo" "$(DEPDIR)/DogmaIMDB.Po"; else rm -f "$(DEPDIR)/DogmaIMDB.Tpo"; exit 1; fi
#	source='dogmaim/DogmaIMDB.cpp' object='DogmaIMDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DogmaIMDB.o `test -f 'dogmaim/DogmaIMDB.cpp' || echo '$(srcdir)/'`dogmaim/DogmaIMDB.cpp

DogmaIMDB.obj: dogmaim/DogmaIMDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DogmaIMDB.obj -MD -MP -MF "$(DEPDIR)/DogmaIMDB.Tpo" -c -o DogmaIMDB.obj `if test -f 'dogmaim/DogmaIMDB.cpp'; then $(CYGPATH_W) 'dogmaim/DogmaIMDB.cpp'; else $(CYGPATH_W) '$(srcdir)/dogmaim/DogmaIMDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/DogmaIMDB.Tpo" "$(DEPDIR)/DogmaIMDB.Po"; else rm -f "$(DEPDIR)/DogmaIMDB.Tpo"; exit 1; fi
#	source='dogmaim/DogmaIMDB.cpp' object='DogmaIMDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DogmaIMDB.obj `if test -f 'dogmaim/DogmaIMDB.cpp'; then $(CYGPATH_W) 'dogmaim/DogmaIMDB.cpp'; else $(CYGPATH_W) '$(srcdir)/dogmaim/DogmaIMDB.cpp'; fi`

DogmaIMService.o: dogmaim/DogmaIMService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DogmaIMService.o -MD -MP -MF "$(DEPDIR)/DogmaIMService.Tpo" -c -o DogmaIMService.o `test -f 'dogmaim/DogmaIMService.cpp' || echo '$(srcdir)/'`dogmaim/DogmaIMService.cpp; \
	then mv -f "$(DEPDIR)/DogmaIMService.Tpo" "$(DEPDIR)/DogmaIMService.Po"; else rm -f "$(DEPDIR)/DogmaIMService.Tpo"; exit 1; fi
#	source='dogmaim/DogmaIMService.cpp' object='DogmaIMService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DogmaIMService.o `test -f 'dogmaim/DogmaIMService.cpp' || echo '$(srcdir)/'`dogmaim/DogmaIMService.cpp

DogmaIMService.obj: dogmaim/DogmaIMService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DogmaIMService.obj -MD -MP -MF "$(DEPDIR)/DogmaIMService.Tpo" -c -o DogmaIMService.obj `if test -f 'dogmaim/DogmaIMService.cpp'; then $(CYGPATH_W) 'dogmaim/DogmaIMService.cpp'; else $(CYGPATH_W) '$(srcdir)/dogmaim/DogmaIMService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/DogmaIMService.Tpo" "$(DEPDIR)/DogmaIMService.Po"; else rm -f "$(DEPDIR)/DogmaIMService.Tpo"; exit 1; fi
#	source='dogmaim/DogmaIMService.cpp' object='DogmaIMService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DogmaIMService.obj `if test -f 'dogmaim/DogmaIMService.cpp'; then $(CYGPATH_W) 'dogmaim/DogmaIMService.cpp'; else $(CYGPATH_W) '$(srcdir)/dogmaim/DogmaIMService.cpp'; fi`

InvBrokerService.o: inventory/InvBrokerService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InvBrokerService.o -MD -MP -MF "$(DEPDIR)/InvBrokerService.Tpo" -c -o InvBrokerService.o `test -f 'inventory/InvBrokerService.cpp' || echo '$(srcdir)/'`inventory/InvBrokerService.cpp; \
	then mv -f "$(DEPDIR)/InvBrokerService.Tpo" "$(DEPDIR)/InvBrokerService.Po"; else rm -f "$(DEPDIR)/InvBrokerService.Tpo"; exit 1; fi
#	source='inventory/InvBrokerService.cpp' object='InvBrokerService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InvBrokerService.o `test -f 'inventory/InvBrokerService.cpp' || echo '$(srcdir)/'`inventory/InvBrokerService.cpp

InvBrokerService.obj: inventory/InvBrokerService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InvBrokerService.obj -MD -MP -MF "$(DEPDIR)/InvBrokerService.Tpo" -c -o InvBrokerService.obj `if test -f 'inventory/InvBrokerService.cpp'; then $(CYGPATH_W) 'inventory/InvBrokerService.cpp'; else $(CYGPATH_W) '$(srcdir)/inventory/InvBrokerService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/InvBrokerService.Tpo" "$(DEPDIR)/InvBrokerService.Po"; else rm -f "$(DEPDIR)/InvBrokerService.Tpo"; exit 1; fi
#	source='inventory/InvBrokerService.cpp' object='InvBrokerService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InvBrokerService.obj `if test -f 'inventory/InvBrokerService.cpp'; then $(CYGPATH_W) 'inventory/InvBrokerService.cpp'; else $(CYGPATH_W) '$(srcdir)/inventory/InvBrokerService.cpp'; fi`

InventoryDB.o: inventory/InventoryDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InventoryDB.o -MD -MP -MF "$(DEPDIR)/InventoryDB.Tpo" -c -o InventoryDB.o `test -f 'inventory/InventoryDB.cpp' || echo '$(srcdir)/'`inventory/InventoryDB.cpp; \
	then mv -f "$(DEPDIR)/InventoryDB.Tpo" "$(DEPDIR)/InventoryDB.Po"; else rm -f "$(DEPDIR)/InventoryDB.Tpo"; exit 1; fi
#	source='inventory/InventoryDB.cpp' object='InventoryDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InventoryDB.o `test -f 'inventory/InventoryDB.cpp' || echo '$(srcdir)/'`inventory/InventoryDB.cpp

InventoryDB.obj: inventory/InventoryDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InventoryDB.obj -MD -MP -MF "$(DEPDIR)/InventoryDB.Tpo" -c -o InventoryDB.obj `if test -f 'inventory/InventoryDB.cpp'; then $(CYGPATH_W) 'inventory/InventoryDB.cpp'; else $(CYGPATH_W) '$(srcdir)/inventory/InventoryDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/InventoryDB.Tpo" "$(DEPDIR)/InventoryDB.Po"; else rm -f "$(DEPDIR)/InventoryDB.Tpo"; exit 1; fi
#	source='inventory/InventoryDB.cpp' object='InventoryDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InventoryDB.obj `if test -f 'inventory/InventoryDB.cpp'; then $(CYGPATH_W) 'inventory/InventoryDB.cpp'; else $(CYGPATH_W) '$(srcdir)/inventory/InventoryDB.cpp'; fi`

InventoryItem.o: inventory/InventoryItem.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InventoryItem.o -MD -MP -MF "$(DEPDIR)/InventoryItem.Tpo" -c -o InventoryItem.o `test -f 'inventory/InventoryItem.cpp' || echo '$(srcdir)/'`inventory/InventoryItem.cpp; \
	then mv -f "$(DEPDIR)/InventoryItem.Tpo" "$(DEPDIR)/InventoryItem.Po"; else rm -f "$(DEPDIR)/InventoryItem.Tpo"; exit 1; fi
#	source='inventory/InventoryItem.cpp' object='InventoryItem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InventoryItem.o `test -f 'inventory/InventoryItem.cpp' || echo '$(srcdir)/'`inventory/InventoryItem.cpp

InventoryItem.obj: inventory/InventoryItem.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InventoryItem.obj -MD -MP -MF "$(DEPDIR)/InventoryItem.Tpo" -c -o InventoryItem.obj `if test -f 'inventory/InventoryItem.cpp'; then $(CYGPATH_W) 'inventory/InventoryItem.cpp'; else $(CYGPATH_W) '$(srcdir)/inventory/InventoryItem.cpp'; fi`; \
	then mv -f "$(DEPDIR)/InventoryItem.Tpo" "$(DEPDIR)/InventoryItem.Po"; else rm -f "$(DEPDIR)/InventoryItem.Tpo"; exit 1; fi
#	source='inventory/InventoryItem.cpp' object='InventoryItem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InventoryItem.obj `if test -f 'inventory/InventoryItem.cpp'; then $(CYGPATH_W) 'inventory/InventoryItem.cpp'; else $(CYGPATH_W) '$(srcdir)/inventory/InventoryItem.cpp'; fi`

ItemDB.o: inventory/ItemDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ItemDB.o -MD -MP -MF "$(DEPDIR)/ItemDB.Tpo" -c -o ItemDB.o `test -f 'inventory/ItemDB.cpp' || echo '$(srcdir)/'`inventory/ItemDB.cpp; \
	then mv -f "$(DEPDIR)/ItemDB.Tpo" "$(DEPDIR)/ItemDB.Po"; else rm -f "$(DEPDIR)/ItemDB.Tpo"; exit 1; fi
#	source='inventory/ItemDB.cpp' object='ItemDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ItemDB.o `test -f 'inventory/ItemDB.cpp' || echo '$(srcdir)/'`inventory/ItemDB.cpp

ItemDB.obj: inventory/ItemDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ItemDB.obj -MD -MP -MF "$(DEPDIR)/ItemDB.Tpo" -c -o ItemDB.obj `if test -f 'inventory/ItemDB.cpp'; then $(CYGPATH_W) 'inventory/ItemDB.cpp'; else $(CYGPATH_W) '$(srcdir)/inventory/ItemDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ItemDB.Tpo" "$(DEPDIR)/ItemDB.Po"; else rm -f "$(DEPDIR)/ItemDB.Tpo"; exit 1; fi
#	source='inventory/ItemDB.cpp' object='ItemDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ItemDB.obj `if test -f 'inventory/ItemDB.cpp'; then $(CYGPATH_W) 'inventory/ItemDB.cpp'; else $(CYGPATH_W) '$(srcdir)/inventory/ItemDB.cpp'; fi`

ItemFactory.o: inventory/ItemFactory.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ItemFactory.o -MD -MP -MF "$(DEPDIR)/ItemFactory.Tpo" -c -o ItemFactory.o `test -f 'inventory/ItemFactory.cpp' || echo '$(srcdir)/'`inventory/ItemFactory.cpp; \
	then mv -f "$(DEPDIR)/ItemFactory.Tpo" "$(DEPDIR)/ItemFactory.Po"; else rm -f "$(DEPDIR)/ItemFactory.Tpo"; exit 1; fi
#	source='inventory/ItemFactory.cpp' object='ItemFactory.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ItemFactory.o `test -f 'inventory/ItemFactory.cpp' || echo '$(srcdir)/'`inventory/ItemFactory.cpp

ItemFactory.obj: inventory/ItemFactory.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ItemFactory.obj -MD -MP -MF "$(DEPDIR)/ItemFactory.Tpo" -c -o ItemFactory.obj `if test -f 'inventory/ItemFactory.cpp'; then $(CYGPATH_W) 'inventory/ItemFactory.cpp'; else $(CYGPATH_W) '$(srcdir)/inventory/ItemFactory.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ItemFactory.Tpo" "$(DEPDIR)/ItemFactory.Po"; else rm -f "$(DEPDIR)/ItemFactory.Tpo"; exit 1; fi
#	source='inventory/ItemFactory.cpp' object='ItemFactory.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ItemFactory.obj `if test -f 'inventory/ItemFactory.cpp'; then $(CYGPATH_W) 'inventory/ItemFactory.cpp'; else $(CYGPATH_W) '$(srcdir)/inventory/ItemFactory.cpp'; fi`

FactoryDB.o: manufacturing/FactoryDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FactoryDB.o -MD -MP -MF "$(DEPDIR)/FactoryDB.Tpo" -c -o FactoryDB.o `test -f 'manufacturing/FactoryDB.cpp' || echo '$(srcdir)/'`manufacturing/FactoryDB.cpp; \
	then mv -f "$(DEPDIR)/FactoryDB.Tpo" "$(DEPDIR)/FactoryDB.Po"; else rm -f "$(DEPDIR)/FactoryDB.Tpo"; exit 1; fi
#	source='manufacturing/FactoryDB.cpp' object='FactoryDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FactoryDB.o `test -f 'manufacturing/FactoryDB.cpp' || echo '$(srcdir)/'`manufacturing/FactoryDB.cpp

FactoryDB.obj: manufacturing/FactoryDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FactoryDB.obj -MD -MP -MF "$(DEPDIR)/FactoryDB.Tpo" -c -o FactoryDB.obj `if test -f 'manufacturing/FactoryDB.cpp'; then $(CYGPATH_W) 'manufacturing/FactoryDB.cpp'; else $(CYGPATH_W) '$(srcdir)/manufacturing/FactoryDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/FactoryDB.Tpo" "$(DEPDIR)/FactoryDB.Po"; else rm -f "$(DEPDIR)/FactoryDB.Tpo"; exit 1; fi
#	source='manufacturing/FactoryDB.cpp' object='FactoryDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FactoryDB.obj `if test -f 'manufacturing/FactoryDB.cpp'; then $(CYGPATH_W) 'manufacturing/FactoryDB.cpp'; else $(CYGPATH_W) '$(srcdir)/manufacturing/FactoryDB.cpp'; fi`

FactoryService.o: manufacturing/FactoryService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FactoryService.o -MD -MP -MF "$(DEPDIR)/FactoryService.Tpo" -c -o FactoryService.o `test -f 'manufacturing/FactoryService.cpp' || echo '$(srcdir)/'`manufacturing/FactoryService.cpp; \
	then mv -f "$(DEPDIR)/FactoryService.Tpo" "$(DEPDIR)/FactoryService.Po"; else rm -f "$(DEPDIR)/FactoryService.Tpo"; exit 1; fi
#	source='manufacturing/FactoryService.cpp' object='FactoryService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FactoryService.o `test -f 'manufacturing/FactoryService.cpp' || echo '$(srcdir)/'`manufacturing/FactoryService.cpp

FactoryService.obj: manufacturing/FactoryService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FactoryService.obj -MD -MP -MF "$(DEPDIR)/FactoryService.Tpo" -c -o FactoryService.obj `if test -f 'manufacturing/FactoryService.cpp'; then $(CYGPATH_W) 'manufacturing/FactoryService.cpp'; else $(CYGPATH_W) '$(srcdir)/manufacturing/FactoryService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/FactoryService.Tpo" "$(DEPDIR)/FactoryService.Po"; else rm -f "$(DEPDIR)/FactoryService.Tpo"; exit 1; fi
#	source='manufacturing/FactoryService.cpp' object='FactoryService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FactoryService.obj `if test -f 'manufacturing/FactoryService.cpp'; then $(CYGPATH_W) 'manufacturing/FactoryService.cpp'; else $(CYGPATH_W) '$(srcdir)/manufacturing/FactoryService.cpp'; fi`

RamProxyDB.o: manufacturing/RamProxyDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RamProxyDB.o -MD -MP -MF "$(DEPDIR)/RamProxyDB.Tpo" -c -o RamProxyDB.o `test -f 'manufacturing/RamProxyDB.cpp' || echo '$(srcdir)/'`manufacturing/RamProxyDB.cpp; \
	then mv -f "$(DEPDIR)/RamProxyDB.Tpo" "$(DEPDIR)/RamProxyDB.Po"; else rm -f "$(DEPDIR)/RamProxyDB.Tpo"; exit 1; fi
#	source='manufacturing/RamProxyDB.cpp' object='RamProxyDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RamProxyDB.o `test -f 'manufacturing/RamProxyDB.cpp' || echo '$(srcdir)/'`manufacturing/RamProxyDB.cpp

RamProxyDB.obj: manufacturing/RamProxyDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RamProxyDB.obj -MD -MP -MF "$(DEPDIR)/RamProxyDB.Tpo" -c -o RamProxyDB.obj `if test -f 'manufacturing/RamProxyDB.cpp'; then $(CYGPATH_W) 'manufacturing/RamProxyDB.cpp'; else $(CYGPATH_W) '$(srcdir)/manufacturing/RamProxyDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/RamProxyDB.Tpo" "$(DEPDIR)/RamProxyDB.Po"; else rm -f "$(DEPDIR)/RamProxyDB.Tpo"; exit 1; fi
#	source='manufacturing/RamProxyDB.cpp' object='RamProxyDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RamProxyDB.obj `if test -f 'manufacturing/RamProxyDB.cpp'; then $(CYGPATH_W) 'manufacturing/RamProxyDB.cpp'; else $(CYGPATH_W) '$(srcdir)/manufacturing/RamProxyDB.cpp'; fi`

RamProxyService.o: manufacturing/RamProxyService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RamProxyService.o -MD -MP -MF "$(DEPDIR)/RamProxyService.Tpo" -c -o RamProxyService.o `test -f 'manufacturing/RamProxyService.cpp' || echo '$(srcdir)/'`manufacturing/RamProxyService.cpp; \
	then mv -f "$(DEPDIR)/RamProxyService.Tpo" "$(DEPDIR)/RamProxyService.Po"; else rm -f "$(DEPDIR)/RamProxyService.Tpo"; exit 1; fi
#	source='manufacturing/RamProxyService.cpp' object='RamProxyService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RamProxyService.o `test -f 'manufacturing/RamProxyService.cpp' || echo '$(srcdir)/'`manufacturing/RamProxyService.cpp

RamProxyService.obj: manufacturing/RamProxyService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RamProxyService.obj -MD -MP -MF "$(DEPDIR)/RamProxyService.Tpo" -c -o RamProxyService.obj `if test -f 'manufacturing/RamProxyService.cpp'; then $(CYGPATH_W) 'manufacturing/RamProxyService.cpp'; else $(CYGPATH_W) '$(srcdir)/manufacturing/RamProxyService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/RamProxyService.Tpo" "$(DEPDIR)/RamProxyService.Po"; else rm -f "$(DEPDIR)/RamProxyService.Tpo"; exit 1; fi
#	source='manufacturing/RamProxyService.cpp' object='RamProxyService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RamProxyService.obj `if test -f 'manufacturing/RamProxyService.cpp'; then $(CYGPATH_W) 'manufacturing/RamProxyService.cpp'; else $(CYGPATH_W) '$(srcdir)/manufacturing/RamProxyService.cpp'; fi`

MapDB.o: map/MapDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MapDB.o -MD -MP -MF "$(DEPDIR)/MapDB.Tpo" -c -o MapDB.o `test -f 'map/MapDB.cpp' || echo '$(srcdir)/'`map/MapDB.cpp; \
	then mv -f "$(DEPDIR)/MapDB.Tpo" "$(DEPDIR)/MapDB.Po"; else rm -f "$(DEPDIR)/MapDB.Tpo"; exit 1; fi
#	source='map/MapDB.cpp' object='MapDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MapDB.o `test -f 'map/MapDB.cpp' || echo '$(srcdir)/'`map/MapDB.cpp

MapDB.obj: map/MapDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MapDB.obj -MD -MP -MF "$(DEPDIR)/MapDB.Tpo" -c -o MapDB.obj `if test -f 'map/MapDB.cpp'; then $(CYGPATH_W) 'map/MapDB.cpp'; else $(CYGPATH_W) '$(srcdir)/map/MapDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/MapDB.Tpo" "$(DEPDIR)/MapDB.Po"; else rm -f "$(DEPDIR)/MapDB.Tpo"; exit 1; fi
#	source='map/MapDB.cpp' object='MapDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MapDB.obj `if test -f 'map/MapDB.cpp'; then $(CYGPATH_W) 'map/MapDB.cpp'; else $(CYGPATH_W) '$(srcdir)/map/MapDB.cpp'; fi`

MapService.o: map/MapService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MapService.o -MD -MP -MF "$(DEPDIR)/MapService.Tpo" -c -o MapService.o `test -f 'map/MapService.cpp' || echo '$(srcdir)/'`map/MapService.cpp; \
	then mv -f "$(DEPDIR)/MapService.Tpo" "$(DEPDIR)/MapService.Po"; else rm -f "$(DEPDIR)/MapService.Tpo"; exit 1; fi
#	source='map/MapService.cpp' object='MapService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MapService.o `test -f 'map/MapService.cpp' || echo '$(srcdir)/'`map/MapService.cpp

MapService.obj: map/MapService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MapService.obj -MD -MP -MF "$(DEPDIR)/MapService.Tpo" -c -o MapService.obj `if test -f 'map/MapService.cpp'; then $(CYGPATH_W) 'map/MapService.cpp'; else $(CYGPATH_W) '$(srcdir)/map/MapService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/MapService.Tpo" "$(DEPDIR)/MapService.Po"; else rm -f "$(DEPDIR)/MapService.Tpo"; exit 1; fi
#	source='map/MapService.cpp' object='MapService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MapService.obj `if test -f 'map/MapService.cpp'; then $(CYGPATH_W) 'map/MapService.cpp'; else $(CYGPATH_W) '$(srcdir)/map/MapService.cpp'; fi`

BillMgrService.o: market/BillMgrService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BillMgrService.o -MD -MP -MF "$(DEPDIR)/BillMgrService.Tpo" -c -o BillMgrService.o `test -f 'market/BillMgrService.cpp' || echo '$(srcdir)/'`market/BillMgrService.cpp; \
	then mv -f "$(DEPDIR)/BillMgrService.Tpo" "$(DEPDIR)/BillMgrService.Po"; else rm -f "$(DEPDIR)/BillMgrService.Tpo"; exit 1; fi
#	source='market/BillMgrService.cpp' object='BillMgrService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BillMgrService.o `test -f 'market/BillMgrService.cpp' || echo '$(srcdir)/'`market/BillMgrService.cpp

BillMgrService.obj: market/BillMgrService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BillMgrService.obj -MD -MP -MF "$(DEPDIR)/BillMgrService.Tpo" -c -o BillMgrService.obj `if test -f 'market/BillMgrService.cpp'; then $(CYGPATH_W) 'market/BillMgrService.cpp'; else $(CYGPATH_W) '$(srcdir)/market/BillMgrService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BillMgrService.Tpo" "$(DEPDIR)/BillMgrService.Po"; else rm -f "$(DEPDIR)/BillMgrService.Tpo"; exit 1; fi
#	source='market/BillMgrService.cpp' object='BillMgrService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BillMgrService.obj `if test -f 'market/BillMgrService.cpp'; then $(CYGPATH_W) 'market/BillMgrService.cpp'; else $(CYGPATH_W) '$(srcdir)/market/BillMgrService.cpp'; fi`

MarketDB.o: market/MarketDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MarketDB.o -MD -MP -MF "$(DEPDIR)/MarketDB.Tpo" -c -o MarketDB.o `test -f 'market/MarketDB.cpp' || echo '$(srcdir)/'`market/MarketDB.cpp; \
	then mv -f "$(DEPDIR)/MarketDB.Tpo" "$(DEPDIR)/MarketDB.Po"; else rm -f "$(DEPDIR)/MarketDB.Tpo"; exit 1; fi
#	source='market/MarketDB.cpp' object='MarketDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MarketDB.o `test -f 'market/MarketDB.cpp' || echo '$(srcdir)/'`market/MarketDB.cpp

MarketDB.obj: market/MarketDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MarketDB.obj -MD -MP -MF "$(DEPDIR)/MarketDB.Tpo" -c -o MarketDB.obj `if test -f 'market/MarketDB.cpp'; then $(CYGPATH_W) 'market/MarketDB.cpp'; else $(CYGPATH_W) '$(srcdir)/market/MarketDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/MarketDB.Tpo" "$(DEPDIR)/MarketDB.Po"; else rm -f "$(DEPDIR)/MarketDB.Tpo"; exit 1; fi
#	source='market/MarketDB.cpp' object='MarketDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MarketDB.obj `if test -f 'market/MarketDB.cpp'; then $(CYGPATH_W) 'market/MarketDB.cpp'; else $(CYGPATH_W) '$(srcdir)/market/MarketDB.cpp'; fi`

MarketProxyService.o: market/MarketProxyService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MarketProxyService.o -MD -MP -MF "$(DEPDIR)/MarketProxyService.Tpo" -c -o MarketProxyService.o `test -f 'market/MarketProxyService.cpp' || echo '$(srcdir)/'`market/MarketProxyService.cpp; \
	then mv -f "$(DEPDIR)/MarketProxyService.Tpo" "$(DEPDIR)/MarketProxyService.Po"; else rm -f "$(DEPDIR)/MarketProxyService.Tpo"; exit 1; fi
#	source='market/MarketProxyService.cpp' object='MarketProxyService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MarketProxyService.o `test -f 'market/MarketProxyService.cpp' || echo '$(srcdir)/'`market/MarketProxyService.cpp

MarketProxyService.obj: market/MarketProxyService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MarketProxyService.obj -MD -MP -MF "$(DEPDIR)/MarketProxyService.Tpo" -c -o MarketProxyService.obj `if test -f 'market/MarketProxyService.cpp'; then $(CYGPATH_W) 'market/MarketProxyService.cpp'; else $(CYGPATH_W) '$(srcdir)/market/MarketProxyService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/MarketProxyService.Tpo" "$(DEPDIR)/MarketProxyService.Po"; else rm -f "$(DEPDIR)/MarketProxyService.Tpo"; exit 1; fi
#	source='market/MarketProxyService.cpp' object='MarketProxyService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MarketProxyService.obj `if test -f 'market/MarketProxyService.cpp'; then $(CYGPATH_W) 'market/MarketProxyService.cpp'; else $(CYGPATH_W) '$(srcdir)/market/MarketProxyService.cpp'; fi`

AsteroidBeltManager.o: mining/AsteroidBeltManager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AsteroidBeltManager.o -MD -MP -MF "$(DEPDIR)/AsteroidBeltManager.Tpo" -c -o AsteroidBeltManager.o `test -f 'mining/AsteroidBeltManager.cpp' || echo '$(srcdir)/'`mining/AsteroidBeltManager.cpp; \
	then mv -f "$(DEPDIR)/AsteroidBeltManager.Tpo" "$(DEPDIR)/AsteroidBeltManager.Po"; else rm -f "$(DEPDIR)/AsteroidBeltManager.Tpo"; exit 1; fi
#	source='mining/AsteroidBeltManager.cpp' object='AsteroidBeltManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AsteroidBeltManager.o `test -f 'mining/AsteroidBeltManager.cpp' || echo '$(srcdir)/'`mining/AsteroidBeltManager.cpp

AsteroidBeltManager.obj: mining/AsteroidBeltManager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AsteroidBeltManager.obj -MD -MP -MF "$(DEPDIR)/AsteroidBeltManager.Tpo" -c -o AsteroidBeltManager.obj `if test -f 'mining/AsteroidBeltManager.cpp'; then $(CYGPATH_W) 'mining/AsteroidBeltManager.cpp'; else $(CYGPATH_W) '$(srcdir)/mining/AsteroidBeltManager.cpp'; fi`; \
	then mv -f "$(DEPDIR)/AsteroidBeltManager.Tpo" "$(DEPDIR)/AsteroidBeltManager.Po"; else rm -f "$(DEPDIR)/AsteroidBeltManager.Tpo"; exit 1; fi
#	source='mining/AsteroidBeltManager.cpp' object='AsteroidBeltManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AsteroidBeltManager.obj `if test -f 'mining/AsteroidBeltManager.cpp'; then $(CYGPATH_W) 'mining/AsteroidBeltManager.cpp'; else $(CYGPATH_W) '$(srcdir)/mining/AsteroidBeltManager.cpp'; fi`

Asteroid.o: mining/Asteroid.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Asteroid.o -MD -MP -MF "$(DEPDIR)/Asteroid.Tpo" -c -o Asteroid.o `test -f 'mining/Asteroid.cpp' || echo '$(srcdir)/'`mining/Asteroid.cpp; \
	then mv -f "$(DEPDIR)/Asteroid.Tpo" "$(DEPDIR)/Asteroid.Po"; else rm -f "$(DEPDIR)/Asteroid.Tpo"; exit 1; fi
#	source='mining/Asteroid.cpp' object='Asteroid.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Asteroid.o `test -f 'mining/Asteroid.cpp' || echo '$(srcdir)/'`mining/Asteroid.cpp

Asteroid.obj: mining/Asteroid.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Asteroid.obj -MD -MP -MF "$(DEPDIR)/Asteroid.Tpo" -c -o Asteroid.obj `if test -f 'mining/Asteroid.cpp'; then $(CYGPATH_W) 'mining/Asteroid.cpp'; else $(CYGPATH_W) '$(srcdir)/mining/Asteroid.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Asteroid.Tpo" "$(DEPDIR)/Asteroid.Po"; else rm -f "$(DEPDIR)/Asteroid.Tpo"; exit 1; fi
#	source='mining/Asteroid.cpp' object='Asteroid.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Asteroid.obj `if test -f 'mining/Asteroid.cpp'; then $(CYGPATH_W) 'mining/Asteroid.cpp'; else $(CYGPATH_W) '$(srcdir)/mining/Asteroid.cpp'; fi`

MiningCommands.o: mining/MiningCommands.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MiningCommands.o -MD -MP -MF "$(DEPDIR)/MiningCommands.Tpo" -c -o MiningCommands.o `test -f 'mining/MiningCommands.cpp' || echo '$(srcdir)/'`mining/MiningCommands.cpp; \
	then mv -f "$(DEPDIR)/MiningCommands.Tpo" "$(DEPDIR)/MiningCommands.Po"; else rm -f "$(DEPDIR)/MiningCommands.Tpo"; exit 1; fi
#	source='mining/MiningCommands.cpp' object='MiningCommands.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MiningCommands.o `test -f 'mining/MiningCommands.cpp' || echo '$(srcdir)/'`mining/MiningCommands.cpp

MiningCommands.obj: mining/MiningCommands.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MiningCommands.obj -MD -MP -MF "$(DEPDIR)/MiningCommands.Tpo" -c -o MiningCommands.obj `if test -f 'mining/MiningCommands.cpp'; then $(CYGPATH_W) 'mining/MiningCommands.cpp'; else $(CYGPATH_W) '$(srcdir)/mining/MiningCommands.cpp'; fi`; \
	then mv -f "$(DEPDIR)/MiningCommands.Tpo" "$(DEPDIR)/MiningCommands.Po"; else rm -f "$(DEPDIR)/MiningCommands.Tpo"; exit 1; fi
#	source='mining/MiningCommands.cpp' object='MiningCommands.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MiningCommands.obj `if test -f 'mining/MiningCommands.cpp'; then $(CYGPATH_W) 'mining/MiningCommands.cpp'; else $(CYGPATH_W) '$(srcdir)/mining/MiningCommands.cpp'; fi`

MiningDB.o: mining/MiningDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MiningDB.o -MD -MP -MF "$(DEPDIR)/MiningDB.Tpo" -c -o MiningDB.o `test -f 'mining/MiningDB.cpp' || echo '$(srcdir)/'`mining/MiningDB.cpp; \
	then mv -f "$(DEPDIR)/MiningDB.Tpo" "$(DEPDIR)/MiningDB.Po"; else rm -f "$(DEPDIR)/MiningDB.Tpo"; exit 1; fi
#	source='mining/MiningDB.cpp' object='MiningDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MiningDB.o `test -f 'mining/MiningDB.cpp' || echo '$(srcdir)/'`mining/MiningDB.cpp

MiningDB.obj: mining/MiningDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MiningDB.obj -MD -MP -MF "$(DEPDIR)/MiningDB.Tpo" -c -o MiningDB.obj `if test -f 'mining/MiningDB.cpp'; then $(CYGPATH_W) 'mining/MiningDB.cpp'; else $(CYGPATH_W) '$(srcdir)/mining/MiningDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/MiningDB.Tpo" "$(DEPDIR)/MiningDB.Po"; else rm -f "$(DEPDIR)/MiningDB.Tpo"; exit 1; fi
#	source='mining/MiningDB.cpp' object='MiningDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MiningDB.obj `if test -f 'mining/MiningDB.cpp'; then $(CYGPATH_W) 'mining/MiningDB.cpp'; else $(CYGPATH_W) '$(srcdir)/mining/MiningDB.cpp'; fi`

ReprocessingDB.o: mining/ReprocessingDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ReprocessingDB.o -MD -MP -MF "$(DEPDIR)/ReprocessingDB.Tpo" -c -o ReprocessingDB.o `test -f 'mining/ReprocessingDB.cpp' || echo '$(srcdir)/'`mining/ReprocessingDB.cpp; \
	then mv -f "$(DEPDIR)/ReprocessingDB.Tpo" "$(DEPDIR)/ReprocessingDB.Po"; else rm -f "$(DEPDIR)/ReprocessingDB.Tpo"; exit 1; fi
#	source='mining/ReprocessingDB.cpp' object='ReprocessingDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ReprocessingDB.o `test -f 'mining/ReprocessingDB.cpp' || echo '$(srcdir)/'`mining/ReprocessingDB.cpp

ReprocessingDB.obj: mining/ReprocessingDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ReprocessingDB.obj -MD -MP -MF "$(DEPDIR)/ReprocessingDB.Tpo" -c -o ReprocessingDB.obj `if test -f 'mining/ReprocessingDB.cpp'; then $(CYGPATH_W) 'mining/ReprocessingDB.cpp'; else $(CYGPATH_W) '$(srcdir)/mining/ReprocessingDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ReprocessingDB.Tpo" "$(DEPDIR)/ReprocessingDB.Po"; else rm -f "$(DEPDIR)/ReprocessingDB.Tpo"; exit 1; fi
#	source='mining/ReprocessingDB.cpp' object='ReprocessingDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ReprocessingDB.obj `if test -f 'mining/ReprocessingDB.cpp'; then $(CYGPATH_W) 'mining/ReprocessingDB.cpp'; else $(CYGPATH_W) '$(srcdir)/mining/ReprocessingDB.cpp'; fi`

ReprocessingService.o: mining/ReprocessingService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ReprocessingService.o -MD -MP -MF "$(DEPDIR)/ReprocessingService.Tpo" -c -o ReprocessingService.o `test -f 'mining/ReprocessingService.cpp' || echo '$(srcdir)/'`mining/ReprocessingService.cpp; \
	then mv -f "$(DEPDIR)/ReprocessingService.Tpo" "$(DEPDIR)/ReprocessingService.Po"; else rm -f "$(DEPDIR)/ReprocessingService.Tpo"; exit 1; fi
#	source='mining/ReprocessingService.cpp' object='ReprocessingService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ReprocessingService.o `test -f 'mining/ReprocessingService.cpp' || echo '$(srcdir)/'`mining/ReprocessingService.cpp

ReprocessingService.obj: mining/ReprocessingService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ReprocessingService.obj -MD -MP -MF "$(DEPDIR)/ReprocessingService.Tpo" -c -o ReprocessingService.obj `if test -f 'mining/ReprocessingService.cpp'; then $(CYGPATH_W) 'mining/ReprocessingService.cpp'; else $(CYGPATH_W) '$(srcdir)/mining/ReprocessingService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ReprocessingService.Tpo" "$(DEPDIR)/ReprocessingService.Po"; else rm -f "$(DEPDIR)/ReprocessingService.Tpo"; exit 1; fi
#	source='mining/ReprocessingService.cpp' object='ReprocessingService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ReprocessingService.obj `if test -f 'mining/ReprocessingService.cpp'; then $(CYGPATH_W) 'mining/ReprocessingService.cpp'; else $(CYGPATH_W) '$(srcdir)/mining/ReprocessingService.cpp'; fi`

Agent.o: missions/Agent.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Agent.o -MD -MP -MF "$(DEPDIR)/Agent.Tpo" -c -o Agent.o `test -f 'missions/Agent.cpp' || echo '$(srcdir)/'`missions/Agent.cpp; \
	then mv -f "$(DEPDIR)/Agent.Tpo" "$(DEPDIR)/Agent.Po"; else rm -f "$(DEPDIR)/Agent.Tpo"; exit 1; fi
#	source='missions/Agent.cpp' object='Agent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Agent.o `test -f 'missions/Agent.cpp' || echo '$(srcdir)/'`missions/Agent.cpp

Agent.obj: missions/Agent.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Agent.obj -MD -MP -MF "$(DEPDIR)/Agent.Tpo" -c -o Agent.obj `if test -f 'missions/Agent.cpp'; then $(CYGPATH_W) 'missions/Agent.cpp'; else $(CYGPATH_W) '$(srcdir)/missions/Agent.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Agent.Tpo" "$(DEPDIR)/Agent.Po"; else rm -f "$(DEPDIR)/Agent.Tpo"; exit 1; fi
#	source='missions/Agent.cpp' object='Agent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Agent.obj `if test -f 'missions/Agent.cpp'; then $(CYGPATH_W) 'missions/Agent.cpp'; else $(CYGPATH_W) '$(srcdir)/missions/Agent.cpp'; fi`

AgentMgrService.o: missions/AgentMgrService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AgentMgrService.o -MD -MP -MF "$(DEPDIR)/AgentMgrService.Tpo" -c -o AgentMgrService.o `test -f 'missions/AgentMgrService.cpp' || echo '$(srcdir)/'`missions/AgentMgrService.cpp; \
	then mv -f "$(DEPDIR)/AgentMgrService.Tpo" "$(DEPDIR)/AgentMgrService.Po"; else rm -f "$(DEPDIR)/AgentMgrService.Tpo"; exit 1; fi
#	source='missions/AgentMgrService.cpp' object='AgentMgrService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AgentMgrService.o `test -f 'missions/AgentMgrService.cpp' || echo '$(srcdir)/'`missions/AgentMgrService.cpp

AgentMgrService.obj: missions/AgentMgrService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AgentMgrService.obj -MD -MP -MF "$(DEPDIR)/AgentMgrService.Tpo" -c -o AgentMgrService.obj `if test -f 'missions/AgentMgrService.cpp'; then $(CYGPATH_W) 'missions/AgentMgrService.cpp'; else $(CYGPATH_W) '$(srcdir)/missions/AgentMgrService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/AgentMgrService.Tpo" "$(DEPDIR)/AgentMgrService.Po"; else rm -f "$(DEPDIR)/AgentMgrService.Tpo"; exit 1; fi
#	source='missions/AgentMgrService.cpp' object='AgentMgrService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AgentMgrService.obj `if test -f 'missions/AgentMgrService.cpp'; then $(CYGPATH_W) 'missions/AgentMgrService.cpp'; else $(CYGPATH_W) '$(srcdir)/missions/AgentMgrService.cpp'; fi`

MissionDB.o: missions/MissionDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MissionDB.o -MD -MP -MF "$(DEPDIR)/MissionDB.Tpo" -c -o MissionDB.o `test -f 'missions/MissionDB.cpp' || echo '$(srcdir)/'`missions/MissionDB.cpp; \
	then mv -f "$(DEPDIR)/MissionDB.Tpo" "$(DEPDIR)/MissionDB.Po"; else rm -f "$(DEPDIR)/MissionDB.Tpo"; exit 1; fi
#	source='missions/MissionDB.cpp' object='MissionDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MissionDB.o `test -f 'missions/MissionDB.cpp' || echo '$(srcdir)/'`missions/MissionDB.cpp

MissionDB.obj: missions/MissionDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MissionDB.obj -MD -MP -MF "$(DEPDIR)/MissionDB.Tpo" -c -o MissionDB.obj `if test -f 'missions/MissionDB.cpp'; then $(CYGPATH_W) 'missions/MissionDB.cpp'; else $(CYGPATH_W) '$(srcdir)/missions/MissionDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/MissionDB.Tpo" "$(DEPDIR)/MissionDB.Po"; else rm -f "$(DEPDIR)/MissionDB.Tpo"; exit 1; fi
#	source='missions/MissionDB.cpp' object='MissionDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MissionDB.obj `if test -f 'missions/MissionDB.cpp'; then $(CYGPATH_W) 'missions/MissionDB.cpp'; else $(CYGPATH_W) '$(srcdir)/missions/MissionDB.cpp'; fi`

MissionMgrService.o: missions/MissionMgrService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MissionMgrService.o -MD -MP -MF "$(DEPDIR)/MissionMgrService.Tpo" -c -o MissionMgrService.o `test -f 'missions/MissionMgrService.cpp' || echo '$(srcdir)/'`missions/MissionMgrService.cpp; \
	then mv -f "$(DEPDIR)/MissionMgrService.Tpo" "$(DEPDIR)/MissionMgrService.Po"; else rm -f "$(DEPDIR)/MissionMgrService.Tpo"; exit 1; fi
#	source='missions/MissionMgrService.cpp' object='MissionMgrService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MissionMgrService.o `test -f 'missions/MissionMgrService.cpp' || echo '$(srcdir)/'`missions/MissionMgrService.cpp

MissionMgrService.obj: missions/MissionMgrService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MissionMgrService.obj -MD -MP -MF "$(DEPDIR)/MissionMgrService.Tpo" -c -o MissionMgrService.obj `if test -f 'missions/MissionMgrService.cpp'; then $(CYGPATH_W) 'missions/MissionMgrService.cpp'; else $(CYGPATH_W) '$(srcdir)/missions/MissionMgrService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/MissionMgrService.Tpo" "$(DEPDIR)/MissionMgrService.Po"; else rm -f "$(DEPDIR)/MissionMgrService.Tpo"; exit 1; fi
#	source='missions/MissionMgrService.cpp' object='MissionMgrService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MissionMgrService.obj `if test -f 'missions/MissionMgrService.cpp'; then $(CYGPATH_W) 'missions/MissionMgrService.cpp'; else $(CYGPATH_W) '$(srcdir)/missions/MissionMgrService.cpp'; fi`

NPCAI.o: npc/NPCAI.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NPCAI.o -MD -MP -MF "$(DEPDIR)/NPCAI.Tpo" -c -o NPCAI.o `test -f 'npc/NPCAI.cpp' || echo '$(srcdir)/'`npc/NPCAI.cpp; \
	then mv -f "$(DEPDIR)/NPCAI.Tpo" "$(DEPDIR)/NPCAI.Po"; else rm -f "$(DEPDIR)/NPCAI.Tpo"; exit 1; fi
#	source='npc/NPCAI.cpp' object='NPCAI.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NPCAI.o `test -f 'npc/NPCAI.cpp' || echo '$(srcdir)/'`npc/NPCAI.cpp

NPCAI.obj: npc/NPCAI.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NPCAI.obj -MD -MP -MF "$(DEPDIR)/NPCAI.Tpo" -c -o NPCAI.obj `if test -f 'npc/NPCAI.cpp'; then $(CYGPATH_W) 'npc/NPCAI.cpp'; else $(CYGPATH_W) '$(srcdir)/npc/NPCAI.cpp'; fi`; \
	then mv -f "$(DEPDIR)/NPCAI.Tpo" "$(DEPDIR)/NPCAI.Po"; else rm -f "$(DEPDIR)/NPCAI.Tpo"; exit 1; fi
#	source='npc/NPCAI.cpp' object='NPCAI.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NPCAI.obj `if test -f 'npc/NPCAI.cpp'; then $(CYGPATH_W) 'npc/NPCAI.cpp'; else $(CYGPATH_W) '$(srcdir)/npc/NPCAI.cpp'; fi`

BeyonceService.o: ship/BeyonceService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BeyonceService.o -MD -MP -MF "$(DEPDIR)/BeyonceService.Tpo" -c -o BeyonceService.o `test -f 'ship/BeyonceService.cpp' || echo '$(srcdir)/'`ship/BeyonceService.cpp; \
	then mv -f "$(DEPDIR)/BeyonceService.Tpo" "$(DEPDIR)/BeyonceService.Po"; else rm -f "$(DEPDIR)/BeyonceService.Tpo"; exit 1; fi
#	source='ship/BeyonceService.cpp' object='BeyonceService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BeyonceService.o `test -f 'ship/BeyonceService.cpp' || echo '$(srcdir)/'`ship/BeyonceService.cpp

BeyonceService.obj: ship/BeyonceService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BeyonceService.obj -MD -MP -MF "$(DEPDIR)/BeyonceService.Tpo" -c -o BeyonceService.obj `if test -f 'ship/BeyonceService.cpp'; then $(CYGPATH_W) 'ship/BeyonceService.cpp'; else $(CYGPATH_W) '$(srcdir)/ship/BeyonceService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BeyonceService.Tpo" "$(DEPDIR)/BeyonceService.Po"; else rm -f "$(DEPDIR)/BeyonceService.Tpo"; exit 1; fi
#	source='ship/BeyonceService.cpp' object='BeyonceService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BeyonceService.obj `if test -f 'ship/BeyonceService.cpp'; then $(CYGPATH_W) 'ship/BeyonceService.cpp'; else $(CYGPATH_W) '$(srcdir)/ship/BeyonceService.cpp'; fi`

DestinyManager.o: ship/DestinyManager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DestinyManager.o -MD -MP -MF "$(DEPDIR)/DestinyManager.Tpo" -c -o DestinyManager.o `test -f 'ship/DestinyManager.cpp' || echo '$(srcdir)/'`ship/DestinyManager.cpp; \
	then mv -f "$(DEPDIR)/DestinyManager.Tpo" "$(DEPDIR)/DestinyManager.Po"; else rm -f "$(DEPDIR)/DestinyManager.Tpo"; exit 1; fi
#	source='ship/DestinyManager.cpp' object='DestinyManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DestinyManager.o `test -f 'ship/DestinyManager.cpp' || echo '$(srcdir)/'`ship/DestinyManager.cpp

DestinyManager.obj: ship/DestinyManager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DestinyManager.obj -MD -MP -MF "$(DEPDIR)/DestinyManager.Tpo" -c -o DestinyManager.obj `if test -f 'ship/DestinyManager.cpp'; then $(CYGPATH_W) 'ship/DestinyManager.cpp'; else $(CYGPATH_W) '$(srcdir)/ship/DestinyManager.cpp'; fi`; \
	then mv -f "$(DEPDIR)/DestinyManager.Tpo" "$(DEPDIR)/DestinyManager.Po"; else rm -f "$(DEPDIR)/DestinyManager.Tpo"; exit 1; fi
#	source='ship/DestinyManager.cpp' object='DestinyManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DestinyManager.obj `if test -f 'ship/DestinyManager.cpp'; then $(CYGPATH_W) 'ship/DestinyManager.cpp'; else $(CYGPATH_W) '$(srcdir)/ship/DestinyManager.cpp'; fi`

InsuranceService.o: ship/InsuranceService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InsuranceService.o -MD -MP -MF "$(DEPDIR)/InsuranceService.Tpo" -c -o InsuranceService.o `test -f 'ship/InsuranceService.cpp' || echo '$(srcdir)/'`ship/InsuranceService.cpp; \
	then mv -f "$(DEPDIR)/InsuranceService.Tpo" "$(DEPDIR)/InsuranceService.Po"; else rm -f "$(DEPDIR)/InsuranceService.Tpo"; exit 1; fi
#	source='ship/InsuranceService.cpp' object='InsuranceService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InsuranceService.o `test -f 'ship/InsuranceService.cpp' || echo '$(srcdir)/'`ship/InsuranceService.cpp

InsuranceService.obj: ship/InsuranceService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InsuranceService.obj -MD -MP -MF "$(DEPDIR)/InsuranceService.Tpo" -c -o InsuranceService.obj `if test -f 'ship/InsuranceService.cpp'; then $(CYGPATH_W) 'ship/InsuranceService.cpp'; else $(CYGPATH_W) '$(srcdir)/ship/InsuranceService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/InsuranceService.Tpo" "$(DEPDIR)/InsuranceService.Po"; else rm -f "$(DEPDIR)/InsuranceService.Tpo"; exit 1; fi
#	source='ship/InsuranceService.cpp' object='InsuranceService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InsuranceService.obj `if test -f 'ship/InsuranceService.cpp'; then $(CYGPATH_W) 'ship/InsuranceService.cpp'; else $(CYGPATH_W) '$(srcdir)/ship/InsuranceService.cpp'; fi`

ModuleManager.o: ship/ModuleManager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ModuleManager.o -MD -MP -MF "$(DEPDIR)/ModuleManager.Tpo" -c -o ModuleManager.o `test -f 'ship/ModuleManager.cpp' || echo '$(srcdir)/'`ship/ModuleManager.cpp; \
	then mv -f "$(DEPDIR)/ModuleManager.Tpo" "$(DEPDIR)/ModuleManager.Po"; else rm -f "$(DEPDIR)/ModuleManager.Tpo"; exit 1; fi
#	source='ship/ModuleManager.cpp' object='ModuleManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ModuleManager.o `test -f 'ship/ModuleManager.cpp' || echo '$(srcdir)/'`ship/ModuleManager.cpp

ModuleManager.obj: ship/ModuleManager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ModuleManager.obj -MD -MP -MF "$(DEPDIR)/ModuleManager.Tpo" -c -o ModuleManager.obj `if test -f 'ship/ModuleManager.cpp'; then $(CYGPATH_W) 'ship/ModuleManager.cpp'; else $(CYGPATH_W) '$(srcdir)/ship/ModuleManager.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ModuleManager.Tpo" "$(DEPDIR)/ModuleManager.Po"; else rm -f "$(DEPDIR)/ModuleManager.Tpo"; exit 1; fi
#	source='ship/ModuleManager.cpp' object='ModuleManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ModuleManager.obj `if test -f 'ship/ModuleManager.cpp'; then $(CYGPATH_W) 'ship/ModuleManager.cpp'; else $(CYGPATH_W) '$(srcdir)/ship/ModuleManager.cpp'; fi`

ShipDB.o: ship/ShipDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ShipDB.o -MD -MP -MF "$(DEPDIR)/ShipDB.Tpo" -c -o ShipDB.o `test -f 'ship/ShipDB.cpp' || echo '$(srcdir)/'`ship/ShipDB.cpp; \
	then mv -f "$(DEPDIR)/ShipDB.Tpo" "$(DEPDIR)/ShipDB.Po"; else rm -f "$(DEPDIR)/ShipDB.Tpo"; exit 1; fi
#	source='ship/ShipDB.cpp' object='ShipDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ShipDB.o `test -f 'ship/ShipDB.cpp' || echo '$(srcdir)/'`ship/ShipDB.cpp

ShipDB.obj: ship/ShipDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ShipDB.obj -MD -MP -MF "$(DEPDIR)/ShipDB.Tpo" -c -o ShipDB.obj `if test -f 'ship/ShipDB.cpp'; then $(CYGPATH_W) 'ship/ShipDB.cpp'; else $(CYGPATH_W) '$(srcdir)/ship/ShipDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ShipDB.Tpo" "$(DEPDIR)/ShipDB.Po"; else rm -f "$(DEPDIR)/ShipDB.Tpo"; exit 1; fi
#	source='ship/ShipDB.cpp' object='ShipDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ShipDB.obj `if test -f 'ship/ShipDB.cpp'; then $(CYGPATH_W) 'ship/ShipDB.cpp'; else $(CYGPATH_W) '$(srcdir)/ship/ShipDB.cpp'; fi`

ShipService.o: ship/ShipService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ShipService.o -MD -MP -MF "$(DEPDIR)/ShipService.Tpo" -c -o ShipService.o `test -f 'ship/ShipService.cpp' || echo '$(srcdir)/'`ship/ShipService.cpp; \
	then mv -f "$(DEPDIR)/ShipService.Tpo" "$(DEPDIR)/ShipService.Po"; else rm -f "$(DEPDIR)/ShipService.Tpo"; exit 1; fi
#	source='ship/ShipService.cpp' object='ShipService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ShipService.o `test -f 'ship/ShipService.cpp' || echo '$(srcdir)/'`ship/ShipService.cpp

ShipService.obj: ship/ShipService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ShipService.obj -MD -MP -MF "$(DEPDIR)/ShipService.Tpo" -c -o ShipService.obj `if test -f 'ship/ShipService.cpp'; then $(CYGPATH_W) 'ship/ShipService.cpp'; else $(CYGPATH_W) '$(srcdir)/ship/ShipService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ShipService.Tpo" "$(DEPDIR)/ShipService.Po"; else rm -f "$(DEPDIR)/ShipService.Tpo"; exit 1; fi
#	source='ship/ShipService.cpp' object='ShipService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ShipService.obj `if test -f 'ship/ShipService.cpp'; then $(CYGPATH_W) 'ship/ShipService.cpp'; else $(CYGPATH_W) '$(srcdir)/ship/ShipService.cpp'; fi`

TargetManager.o: ship/TargetManager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TargetManager.o -MD -MP -MF "$(DEPDIR)/TargetManager.Tpo" -c -o TargetManager.o `test -f 'ship/TargetManager.cpp' || echo '$(srcdir)/'`ship/TargetManager.cpp; \
	then mv -f "$(DEPDIR)/TargetManager.Tpo" "$(DEPDIR)/TargetManager.Po"; else rm -f "$(DEPDIR)/TargetManager.Tpo"; exit 1; fi
#	source='ship/TargetManager.cpp' object='TargetManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TargetManager.o `test -f 'ship/TargetManager.cpp' || echo '$(srcdir)/'`ship/TargetManager.cpp

TargetManager.obj: ship/TargetManager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TargetManager.obj -MD -MP -MF "$(DEPDIR)/TargetManager.Tpo" -c -o TargetManager.obj `if test -f 'ship/TargetManager.cpp'; then $(CYGPATH_W) 'ship/TargetManager.cpp'; else $(CYGPATH_W) '$(srcdir)/ship/TargetManager.cpp'; fi`; \
	then mv -f "$(DEPDIR)/TargetManager.Tpo" "$(DEPDIR)/TargetManager.Po"; else rm -f "$(DEPDIR)/TargetManager.Tpo"; exit 1; fi
#	source='ship/TargetManager.cpp' object='TargetManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TargetManager.obj `if test -f 'ship/TargetManager.cpp'; then $(CYGPATH_W) 'ship/TargetManager.cpp'; else $(CYGPATH_W) '$(srcdir)/ship/TargetManager.cpp'; fi`

SpawnDB.o: spawn/SpawnDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SpawnDB.o -MD -MP -MF "$(DEPDIR)/SpawnDB.Tpo" -c -o SpawnDB.o `test -f 'spawn/SpawnDB.cpp' || echo '$(srcdir)/'`spawn/SpawnDB.cpp; \
	then mv -f "$(DEPDIR)/SpawnDB.Tpo" "$(DEPDIR)/SpawnDB.Po"; else rm -f "$(DEPDIR)/SpawnDB.Tpo"; exit 1; fi
#	source='spawn/SpawnDB.cpp' object='SpawnDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SpawnDB.o `test -f 'spawn/SpawnDB.cpp' || echo '$(srcdir)/'`spawn/SpawnDB.cpp

SpawnDB.obj: spawn/SpawnDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SpawnDB.obj -MD -MP -MF "$(DEPDIR)/SpawnDB.Tpo" -c -o SpawnDB.obj `if test -f 'spawn/SpawnDB.cpp'; then $(CYGPATH_W) 'spawn/SpawnDB.cpp'; else $(CYGPATH_W) '$(srcdir)/spawn/SpawnDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SpawnDB.Tpo" "$(DEPDIR)/SpawnDB.Po"; else rm -f "$(DEPDIR)/SpawnDB.Tpo"; exit 1; fi
#	source='spawn/SpawnDB.cpp' object='SpawnDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SpawnDB.obj `if test -f 'spawn/SpawnDB.cpp'; then $(CYGPATH_W) 'spawn/SpawnDB.cpp'; else $(CYGPATH_W) '$(srcdir)/spawn/SpawnDB.cpp'; fi`

SpawnManager.o: spawn/SpawnManager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SpawnManager.o -MD -MP -MF "$(DEPDIR)/SpawnManager.Tpo" -c -o SpawnManager.o `test -f 'spawn/SpawnManager.cpp' || echo '$(srcdir)/'`spawn/SpawnManager.cpp; \
	then mv -f "$(DEPDIR)/SpawnManager.Tpo" "$(DEPDIR)/SpawnManager.Po"; else rm -f "$(DEPDIR)/SpawnManager.Tpo"; exit 1; fi
#	source='spawn/SpawnManager.cpp' object='SpawnManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SpawnManager.o `test -f 'spawn/SpawnManager.cpp' || echo '$(srcdir)/'`spawn/SpawnManager.cpp

SpawnManager.obj: spawn/SpawnManager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SpawnManager.obj -MD -MP -MF "$(DEPDIR)/SpawnManager.Tpo" -c -o SpawnManager.obj `if test -f 'spawn/SpawnManager.cpp'; then $(CYGPATH_W) 'spawn/SpawnManager.cpp'; else $(CYGPATH_W) '$(srcdir)/spawn/SpawnManager.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SpawnManager.Tpo" "$(DEPDIR)/SpawnManager.Po"; else rm -f "$(DEPDIR)/SpawnManager.Tpo"; exit 1; fi
#	source='spawn/SpawnManager.cpp' object='SpawnManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SpawnManager.obj `if test -f 'spawn/SpawnManager.cpp'; then $(CYGPATH_W) 'spawn/SpawnManager.cpp'; else $(CYGPATH_W) '$(srcdir)/spawn/SpawnManager.cpp'; fi`

Standing2Service.o: standing/Standing2Service.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Standing2Service.o -MD -MP -MF "$(DEPDIR)/Standing2Service.Tpo" -c -o Standing2Service.o `test -f 'standing/Standing2Service.cpp' || echo '$(srcdir)/'`standing/Standing2Service.cpp; \
	then mv -f "$(DEPDIR)/Standing2Service.Tpo" "$(DEPDIR)/Standing2Service.Po"; else rm -f "$(DEPDIR)/Standing2Service.Tpo"; exit 1; fi
#	source='standing/Standing2Service.cpp' object='Standing2Service.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Standing2Service.o `test -f 'standing/Standing2Service.cpp' || echo '$(srcdir)/'`standing/Standing2Service.cpp

Standing2Service.obj: standing/Standing2Service.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Standing2Service.obj -MD -MP -MF "$(DEPDIR)/Standing2Service.Tpo" -c -o Standing2Service.obj `if test -f 'standing/Standing2Service.cpp'; then $(CYGPATH_W) 'standing/Standing2Service.cpp'; else $(CYGPATH_W) '$(srcdir)/standing/Standing2Service.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Standing2Service.Tpo" "$(DEPDIR)/Standing2Service.Po"; else rm -f "$(DEPDIR)/Standing2Service.Tpo"; exit 1; fi
#	source='standing/Standing2Service.cpp' object='Standing2Service.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Standing2Service.obj `if test -f 'standing/Standing2Service.cpp'; then $(CYGPATH_W) 'standing/Standing2Service.cpp'; else $(CYGPATH_W) '$(srcdir)/standing/Standing2Service.cpp'; fi`

StandingDB.o: standing/StandingDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StandingDB.o -MD -MP -MF "$(DEPDIR)/StandingDB.Tpo" -c -o StandingDB.o `test -f 'standing/StandingDB.cpp' || echo '$(srcdir)/'`standing/StandingDB.cpp; \
	then mv -f "$(DEPDIR)/StandingDB.Tpo" "$(DEPDIR)/StandingDB.Po"; else rm -f "$(DEPDIR)/StandingDB.Tpo"; exit 1; fi
#	source='standing/StandingDB.cpp' object='StandingDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StandingDB.o `test -f 'standing/StandingDB.cpp' || echo '$(srcdir)/'`standing/StandingDB.cpp

StandingDB.obj: standing/StandingDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StandingDB.obj -MD -MP -MF "$(DEPDIR)/StandingDB.Tpo" -c -o StandingDB.obj `if test -f 'standing/StandingDB.cpp'; then $(CYGPATH_W) 'standing/StandingDB.cpp'; else $(CYGPATH_W) '$(srcdir)/standing/StandingDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/StandingDB.Tpo" "$(DEPDIR)/StandingDB.Po"; else rm -f "$(DEPDIR)/StandingDB.Tpo"; exit 1; fi
#	source='standing/StandingDB.cpp' object='StandingDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StandingDB.obj `if test -f 'standing/StandingDB.cpp'; then $(CYGPATH_W) 'standing/StandingDB.cpp'; else $(CYGPATH_W) '$(srcdir)/standing/StandingDB.cpp'; fi`

JumpCloneService.o: station/JumpCloneService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT JumpCloneService.o -MD -MP -MF "$(DEPDIR)/JumpCloneService.Tpo" -c -o JumpCloneService.o `test -f 'station/JumpCloneService.cpp' || echo '$(srcdir)/'`station/JumpCloneService.cpp; \
	then mv -f "$(DEPDIR)/JumpCloneService.Tpo" "$(DEPDIR)/JumpCloneService.Po"; else rm -f "$(DEPDIR)/JumpCloneService.Tpo"; exit 1; fi
#	source='station/JumpCloneService.cpp' object='JumpCloneService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o JumpCloneService.o `test -f 'station/JumpCloneService.cpp' || echo '$(srcdir)/'`station/JumpCloneService.cpp

JumpCloneService.obj: station/JumpCloneService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT JumpCloneService.obj -MD -MP -MF "$(DEPDIR)/JumpCloneService.Tpo" -c -o JumpCloneService.obj `if test -f 'station/JumpCloneService.cpp'; then $(CYGPATH_W) 'station/JumpCloneService.cpp'; else $(CYGPATH_W) '$(srcdir)/station/JumpCloneService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/JumpCloneService.Tpo" "$(DEPDIR)/JumpCloneService.Po"; else rm -f "$(DEPDIR)/JumpCloneService.Tpo"; exit 1; fi
#	source='station/JumpCloneService.cpp' object='JumpCloneService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o JumpCloneService.obj `if test -f 'station/JumpCloneService.cpp'; then $(CYGPATH_W) 'station/JumpCloneService.cpp'; else $(CYGPATH_W) '$(srcdir)/station/JumpCloneService.cpp'; fi`

StationDB.o: station/StationDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StationDB.o -MD -MP -MF "$(DEPDIR)/StationDB.Tpo" -c -o StationDB.o `test -f 'station/StationDB.cpp' || echo '$(srcdir)/'`station/StationDB.cpp; \
	then mv -f "$(DEPDIR)/StationDB.Tpo" "$(DEPDIR)/StationDB.Po"; else rm -f "$(DEPDIR)/StationDB.Tpo"; exit 1; fi
#	source='station/StationDB.cpp' object='StationDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StationDB.o `test -f 'station/StationDB.cpp' || echo '$(srcdir)/'`station/StationDB.cpp

StationDB.obj: station/StationDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StationDB.obj -MD -MP -MF "$(DEPDIR)/StationDB.Tpo" -c -o StationDB.obj `if test -f 'station/StationDB.cpp'; then $(CYGPATH_W) 'station/StationDB.cpp'; else $(CYGPATH_W) '$(srcdir)/station/StationDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/StationDB.Tpo" "$(DEPDIR)/StationDB.Po"; else rm -f "$(DEPDIR)/StationDB.Tpo"; exit 1; fi
#	source='station/StationDB.cpp' object='StationDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StationDB.obj `if test -f 'station/StationDB.cpp'; then $(CYGPATH_W) 'station/StationDB.cpp'; else $(CYGPATH_W) '$(srcdir)/station/StationDB.cpp'; fi`

StationService.o: station/StationService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StationService.o -MD -MP -MF "$(DEPDIR)/StationService.Tpo" -c -o StationService.o `test -f 'station/StationService.cpp' || echo '$(srcdir)/'`station/StationService.cpp; \
	then mv -f "$(DEPDIR)/StationService.Tpo" "$(DEPDIR)/StationService.Po"; else rm -f "$(DEPDIR)/StationService.Tpo"; exit 1; fi
#	source='station/StationService.cpp' object='StationService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StationService.o `test -f 'station/StationService.cpp' || echo '$(srcdir)/'`station/StationService.cpp

StationService.obj: station/StationService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StationService.obj -MD -MP -MF "$(DEPDIR)/StationService.Tpo" -c -o StationService.obj `if test -f 'station/StationService.cpp'; then $(CYGPATH_W) 'station/StationService.cpp'; else $(CYGPATH_W) '$(srcdir)/station/StationService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/StationService.Tpo" "$(DEPDIR)/StationService.Po"; else rm -f "$(DEPDIR)/StationService.Tpo"; exit 1; fi
#	source='station/StationService.cpp' object='StationService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StationService.obj `if test -f 'station/StationService.cpp'; then $(CYGPATH_W) 'station/StationService.cpp'; else $(CYGPATH_W) '$(srcdir)/station/StationService.cpp'; fi`

StationSvcService.o: station/StationSvcService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StationSvcService.o -MD -MP -MF "$(DEPDIR)/StationSvcService.Tpo" -c -o StationSvcService.o `test -f 'station/StationSvcService.cpp' || echo '$(srcdir)/'`station/StationSvcService.cpp; \
	then mv -f "$(DEPDIR)/StationSvcService.Tpo" "$(DEPDIR)/StationSvcService.Po"; else rm -f "$(DEPDIR)/StationSvcService.Tpo"; exit 1; fi
#	source='station/StationSvcService.cpp' object='StationSvcService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StationSvcService.o `test -f 'station/StationSvcService.cpp' || echo '$(srcdir)/'`station/StationSvcService.cpp

StationSvcService.obj: station/StationSvcService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StationSvcService.obj -MD -MP -MF "$(DEPDIR)/StationSvcService.Tpo" -c -o StationSvcService.obj `if test -f 'station/StationSvcService.cpp'; then $(CYGPATH_W) 'station/StationSvcService.cpp'; else $(CYGPATH_W) '$(srcdir)/station/StationSvcService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/StationSvcService.Tpo" "$(DEPDIR)/StationSvcService.Po"; else rm -f "$(DEPDIR)/StationSvcService.Tpo"; exit 1; fi
#	source='station/StationSvcService.cpp' object='StationSvcService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StationSvcService.obj `if test -f 'station/StationSvcService.cpp'; then $(CYGPATH_W) 'station/StationSvcService.cpp'; else $(CYGPATH_W) '$(srcdir)/station/StationSvcService.cpp'; fi`

BubbleManager.o: system/BubbleManager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BubbleManager.o -MD -MP -MF "$(DEPDIR)/BubbleManager.Tpo" -c -o BubbleManager.o `test -f 'system/BubbleManager.cpp' || echo '$(srcdir)/'`system/BubbleManager.cpp; \
	then mv -f "$(DEPDIR)/BubbleManager.Tpo" "$(DEPDIR)/BubbleManager.Po"; else rm -f "$(DEPDIR)/BubbleManager.Tpo"; exit 1; fi
#	source='system/BubbleManager.cpp' object='BubbleManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BubbleManager.o `test -f 'system/BubbleManager.cpp' || echo '$(srcdir)/'`system/BubbleManager.cpp

BubbleManager.obj: system/BubbleManager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BubbleManager.obj -MD -MP -MF "$(DEPDIR)/BubbleManager.Tpo" -c -o BubbleManager.obj `if test -f 'system/BubbleManager.cpp'; then $(CYGPATH_W) 'system/BubbleManager.cpp'; else $(CYGPATH_W) '$(srcdir)/system/BubbleManager.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BubbleManager.Tpo" "$(DEPDIR)/BubbleManager.Po"; else rm -f "$(DEPDIR)/BubbleManager.Tpo"; exit 1; fi
#	source='system/BubbleManager.cpp' object='BubbleManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BubbleManager.obj `if test -f 'system/BubbleManager.cpp'; then $(CYGPATH_W) 'system/BubbleManager.cpp'; else $(CYGPATH_W) '$(srcdir)/system/BubbleManager.cpp'; fi`

Damage.o: system/Damage.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Damage.o -MD -MP -MF "$(DEPDIR)/Damage.Tpo" -c -o Damage.o `test -f 'system/Damage.cpp' || echo '$(srcdir)/'`system/Damage.cpp; \
	then mv -f "$(DEPDIR)/Damage.Tpo" "$(DEPDIR)/Damage.Po"; else rm -f "$(DEPDIR)/Damage.Tpo"; exit 1; fi
#	source='system/Damage.cpp' object='Damage.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Damage.o `test -f 'system/Damage.cpp' || echo '$(srcdir)/'`system/Damage.cpp

Damage.obj: system/Damage.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Damage.obj -MD -MP -MF "$(DEPDIR)/Damage.Tpo" -c -o Damage.obj `if test -f 'system/Damage.cpp'; then $(CYGPATH_W) 'system/Damage.cpp'; else $(CYGPATH_W) '$(srcdir)/system/Damage.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Damage.Tpo" "$(DEPDIR)/Damage.Po"; else rm -f "$(DEPDIR)/Damage.Tpo"; exit 1; fi
#	source='system/Damage.cpp' object='Damage.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Damage.obj `if test -f 'system/Damage.cpp'; then $(CYGPATH_W) 'system/Damage.cpp'; else $(CYGPATH_W) '$(srcdir)/system/Damage.cpp'; fi`

DungeonService.o: system/DungeonService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DungeonService.o -MD -MP -MF "$(DEPDIR)/DungeonService.Tpo" -c -o DungeonService.o `test -f 'system/DungeonService.cpp' || echo '$(srcdir)/'`system/DungeonService.cpp; \
	then mv -f "$(DEPDIR)/DungeonService.Tpo" "$(DEPDIR)/DungeonService.Po"; else rm -f "$(DEPDIR)/DungeonService.Tpo"; exit 1; fi
#	source='system/DungeonService.cpp' object='DungeonService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DungeonService.o `test -f 'system/DungeonService.cpp' || echo '$(srcdir)/'`system/DungeonService.cpp

DungeonService.obj: system/DungeonService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DungeonService.obj -MD -MP -MF "$(DEPDIR)/DungeonService.Tpo" -c -o DungeonService.obj `if test -f 'system/DungeonService.cpp'; then $(CYGPATH_W) 'system/DungeonService.cpp'; else $(CYGPATH_W) '$(srcdir)/system/DungeonService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/DungeonService.Tpo" "$(DEPDIR)/DungeonService.Po"; else rm -f "$(DEPDIR)/DungeonService.Tpo"; exit 1; fi
#	source='system/DungeonService.cpp' object='DungeonService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DungeonService.obj `if test -f 'system/DungeonService.cpp'; then $(CYGPATH_W) 'system/DungeonService.cpp'; else $(CYGPATH_W) '$(srcdir)/system/DungeonService.cpp'; fi`

KeeperService.o: system/KeeperService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KeeperService.o -MD -MP -MF "$(DEPDIR)/KeeperService.Tpo" -c -o KeeperService.o `test -f 'system/KeeperService.cpp' || echo '$(srcdir)/'`system/KeeperService.cpp; \
	then mv -f "$(DEPDIR)/KeeperService.Tpo" "$(DEPDIR)/KeeperService.Po"; else rm -f "$(DEPDIR)/KeeperService.Tpo"; exit 1; fi
#	source='system/KeeperService.cpp' object='KeeperService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KeeperService.o `test -f 'system/KeeperService.cpp' || echo '$(srcdir)/'`system/KeeperService.cpp

KeeperService.obj: system/KeeperService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KeeperService.obj -MD -MP -MF "$(DEPDIR)/KeeperService.Tpo" -c -o KeeperService.obj `if test -f 'system/KeeperService.cpp'; then $(CYGPATH_W) 'system/KeeperService.cpp'; else $(CYGPATH_W) '$(srcdir)/system/KeeperService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/KeeperService.Tpo" "$(DEPDIR)/KeeperService.Po"; else rm -f "$(DEPDIR)/KeeperService.Tpo"; exit 1; fi
#	source='system/KeeperService.cpp' object='KeeperService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KeeperService.obj `if test -f 'system/KeeperService.cpp'; then $(CYGPATH_W) 'system/KeeperService.cpp'; else $(CYGPATH_W) '$(srcdir)/system/KeeperService.cpp'; fi`

ScenarioService.o: system/ScenarioService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ScenarioService.o -MD -MP -MF "$(DEPDIR)/ScenarioService.Tpo" -c -o ScenarioService.o `test -f 'system/ScenarioService.cpp' || echo '$(srcdir)/'`system/ScenarioService.cpp; \
	then mv -f "$(DEPDIR)/ScenarioService.Tpo" "$(DEPDIR)/ScenarioService.Po"; else rm -f "$(DEPDIR)/ScenarioService.Tpo"; exit 1; fi
#	source='system/ScenarioService.cpp' object='ScenarioService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ScenarioService.o `test -f 'system/ScenarioService.cpp' || echo '$(srcdir)/'`system/ScenarioService.cpp

ScenarioService.obj: system/ScenarioService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ScenarioService.obj -MD -MP -MF "$(DEPDIR)/ScenarioService.Tpo" -c -o ScenarioService.obj `if test -f 'system/ScenarioService.cpp'; then $(CYGPATH_W) 'system/ScenarioService.cpp'; else $(CYGPATH_W) '$(srcdir)/system/ScenarioService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ScenarioService.Tpo" "$(DEPDIR)/ScenarioService.Po"; else rm -f "$(DEPDIR)/ScenarioService.Tpo"; exit 1; fi
#	source='system/ScenarioService.cpp' object='ScenarioService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ScenarioService.obj `if test -f 'system/ScenarioService.cpp'; then $(CYGPATH_W) 'system/ScenarioService.cpp'; else $(CYGPATH_W) '$(srcdir)/system/ScenarioService.cpp'; fi`

SystemBubble.o: system/SystemBubble.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SystemBubble.o -MD -MP -MF "$(DEPDIR)/SystemBubble.Tpo" -c -o SystemBubble.o `test -f 'system/SystemBubble.cpp' || echo '$(srcdir)/'`system/SystemBubble.cpp; \
	then mv -f "$(DEPDIR)/SystemBubble.Tpo" "$(DEPDIR)/SystemBubble.Po"; else rm -f "$(DEPDIR)/SystemBubble.Tpo"; exit 1; fi
#	source='system/SystemBubble.cpp' object='SystemBubble.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SystemBubble.o `test -f 'system/SystemBubble.cpp' || echo '$(srcdir)/'`system/SystemBubble.cpp

SystemBubble.obj: system/SystemBubble.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SystemBubble.obj -MD -MP -MF "$(DEPDIR)/SystemBubble.Tpo" -c -o SystemBubble.obj `if test -f 'system/SystemBubble.cpp'; then $(CYGPATH_W) 'system/SystemBubble.cpp'; else $(CYGPATH_W) '$(srcdir)/system/SystemBubble.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SystemBubble.Tpo" "$(DEPDIR)/SystemBubble.Po"; else rm -f "$(DEPDIR)/SystemBubble.Tpo"; exit 1; fi
#	source='system/SystemBubble.cpp' object='SystemBubble.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SystemBubble.obj `if test -f 'system/SystemBubble.cpp'; then $(CYGPATH_W) 'system/SystemBubble.cpp'; else $(CYGPATH_W) '$(srcdir)/system/SystemBubble.cpp'; fi`

SystemDB.o: system/SystemDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SystemDB.o -MD -MP -MF "$(DEPDIR)/SystemDB.Tpo" -c -o SystemDB.o `test -f 'system/SystemDB.cpp' || echo '$(srcdir)/'`system/SystemDB.cpp; \
	then mv -f "$(DEPDIR)/SystemDB.Tpo" "$(DEPDIR)/SystemDB.Po"; else rm -f "$(DEPDIR)/SystemDB.Tpo"; exit 1; fi
#	source='system/SystemDB.cpp' object='SystemDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SystemDB.o `test -f 'system/SystemDB.cpp' || echo '$(srcdir)/'`system/SystemDB.cpp

SystemDB.obj: system/SystemDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SystemDB.obj -MD -MP -MF "$(DEPDIR)/SystemDB.Tpo" -c -o SystemDB.obj `if test -f 'system/SystemDB.cpp'; then $(CYGPATH_W) 'system/SystemDB.cpp'; else $(CYGPATH_W) '$(srcdir)/system/SystemDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SystemDB.Tpo" "$(DEPDIR)/SystemDB.Po"; else rm -f "$(DEPDIR)/SystemDB.Tpo"; exit 1; fi
#	source='system/SystemDB.cpp' object='SystemDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SystemDB.obj `if test -f 'system/SystemDB.cpp'; then $(CYGPATH_W) 'system/SystemDB.cpp'; else $(CYGPATH_W) '$(srcdir)/system/SystemDB.cpp'; fi`

SystemEntities.o: system/SystemEntities.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SystemEntities.o -MD -MP -MF "$(DEPDIR)/SystemEntities.Tpo" -c -o SystemEntities.o `test -f 'system/SystemEntities.cpp' || echo '$(srcdir)/'`system/SystemEntities.cpp; \
	then mv -f "$(DEPDIR)/SystemEntities.Tpo" "$(DEPDIR)/SystemEntities.Po"; else rm -f "$(DEPDIR)/SystemEntities.Tpo"; exit 1; fi
#	source='system/SystemEntities.cpp' object='SystemEntities.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SystemEntities.o `test -f 'system/SystemEntities.cpp' || echo '$(srcdir)/'`system/SystemEntities.cpp

SystemEntities.obj: system/SystemEntities.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SystemEntities.obj -MD -MP -MF "$(DEPDIR)/SystemEntities.Tpo" -c -o SystemEntities.obj `if test -f 'system/SystemEntities.cpp'; then $(CYGPATH_W) 'system/SystemEntities.cpp'; else $(CYGPATH_W) '$(srcdir)/system/SystemEntities.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SystemEntities.Tpo" "$(DEPDIR)/SystemEntities.Po"; else rm -f "$(DEPDIR)/SystemEntities.Tpo"; exit 1; fi
#	source='system/SystemEntities.cpp' object='SystemEntities.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SystemEntities.obj `if test -f 'system/SystemEntities.cpp'; then $(CYGPATH_W) 'system/SystemEntities.cpp'; else $(CYGPATH_W) '$(srcdir)/system/SystemEntities.cpp'; fi`

SystemEntity.o: system/SystemEntity.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SystemEntity.o -MD -MP -MF "$(DEPDIR)/SystemEntity.Tpo" -c -o SystemEntity.o `test -f 'system/SystemEntity.cpp' || echo '$(srcdir)/'`system/SystemEntity.cpp; \
	then mv -f "$(DEPDIR)/SystemEntity.Tpo" "$(DEPDIR)/SystemEntity.Po"; else rm -f "$(DEPDIR)/SystemEntity.Tpo"; exit 1; fi
#	source='system/SystemEntity.cpp' object='SystemEntity.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SystemEntity.o `test -f 'system/SystemEntity.cpp' || echo '$(srcdir)/'`system/SystemEntity.cpp

SystemEntity.obj: system/SystemEntity.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SystemEntity.obj -MD -MP -MF "$(DEPDIR)/SystemEntity.Tpo" -c -o SystemEntity.obj `if test -f 'system/SystemEntity.cpp'; then $(CYGPATH_W) 'system/SystemEntity.cpp'; else $(CYGPATH_W) '$(srcdir)/system/SystemEntity.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SystemEntity.Tpo" "$(DEPDIR)/SystemEntity.Po"; else rm -f "$(DEPDIR)/SystemEntity.Tpo"; exit 1; fi
#	source='system/SystemEntity.cpp' object='SystemEntity.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SystemEntity.obj `if test -f 'system/SystemEntity.cpp'; then $(CYGPATH_W) 'system/SystemEntity.cpp'; else $(CYGPATH_W) '$(srcdir)/system/SystemEntity.cpp'; fi`

SystemManager.o: system/SystemManager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SystemManager.o -MD -MP -MF "$(DEPDIR)/SystemManager.Tpo" -c -o SystemManager.o `test -f 'system/SystemManager.cpp' || echo '$(srcdir)/'`system/SystemManager.cpp; \
	then mv -f "$(DEPDIR)/SystemManager.Tpo" "$(DEPDIR)/SystemManager.Po"; else rm -f "$(DEPDIR)/SystemManager.Tpo"; exit 1; fi
#	source='system/SystemManager.cpp' object='SystemManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SystemManager.o `test -f 'system/SystemManager.cpp' || echo '$(srcdir)/'`system/SystemManager.cpp

SystemManager.obj: system/SystemManager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SystemManager.obj -MD -MP -MF "$(DEPDIR)/SystemManager.Tpo" -c -o SystemManager.obj `if test -f 'system/SystemManager.cpp'; then $(CYGPATH_W) 'system/SystemManager.cpp'; else $(CYGPATH_W) '$(srcdir)/system/SystemManager.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SystemManager.Tpo" "$(DEPDIR)/SystemManager.Po"; else rm -f "$(DEPDIR)/SystemManager.Tpo"; exit 1; fi
#	source='system/SystemManager.cpp' object='SystemManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SystemManager.obj `if test -f 'system/SystemManager.cpp'; then $(CYGPATH_W) 'system/SystemManager.cpp'; else $(CYGPATH_W) '$(srcdir)/system/SystemManager.cpp'; fi`

TutorialDB.o: tutorial/TutorialDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TutorialDB.o -MD -MP -MF "$(DEPDIR)/TutorialDB.Tpo" -c -o TutorialDB.o `test -f 'tutorial/TutorialDB.cpp' || echo '$(srcdir)/'`tutorial/TutorialDB.cpp; \
	then mv -f "$(DEPDIR)/TutorialDB.Tpo" "$(DEPDIR)/TutorialDB.Po"; else rm -f "$(DEPDIR)/TutorialDB.Tpo"; exit 1; fi
#	source='tutorial/TutorialDB.cpp' object='TutorialDB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TutorialDB.o `test -f 'tutorial/TutorialDB.cpp' || echo '$(srcdir)/'`tutorial/TutorialDB.cpp

TutorialDB.obj: tutorial/TutorialDB.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TutorialDB.obj -MD -MP -MF "$(DEPDIR)/TutorialDB.Tpo" -c -o TutorialDB.obj `if test -f 'tutorial/TutorialDB.cpp'; then $(CYGPATH_W) 'tutorial/TutorialDB.cpp'; else $(CYGPATH_W) '$(srcdir)/tutorial/TutorialDB.cpp'; fi`; \
	then mv -f "$(DEPDIR)/TutorialDB.Tpo" "$(DEPDIR)/TutorialDB.Po"; else rm -f "$(DEPDIR)/TutorialDB.Tpo"; exit 1; fi
#	source='tutorial/TutorialDB.cpp' object='TutorialDB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TutorialDB.obj `if test -f 'tutorial/TutorialDB.cpp'; then $(CYGPATH_W) 'tutorial/TutorialDB.cpp'; else $(CYGPATH_W) '$(srcdir)/tutorial/TutorialDB.cpp'; fi`

TutorialService.o: tutorial/TutorialService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TutorialService.o -MD -MP -MF "$(DEPDIR)/TutorialService.Tpo" -c -o TutorialService.o `test -f 'tutorial/TutorialService.cpp' || echo '$(srcdir)/'`tutorial/TutorialService.cpp; \
	then mv -f "$(DEPDIR)/TutorialService.Tpo" "$(DEPDIR)/TutorialService.Po"; else rm -f "$(DEPDIR)/TutorialService.Tpo"; exit 1; fi
#	source='tutorial/TutorialService.cpp' object='TutorialService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TutorialService.o `test -f 'tutorial/TutorialService.cpp' || echo '$(srcdir)/'`tutorial/TutorialService.cpp

TutorialService.obj: tutorial/TutorialService.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TutorialService.obj -MD -MP -MF "$(DEPDIR)/TutorialService.Tpo" -c -o TutorialService.obj `if test -f 'tutorial/TutorialService.cpp'; then $(CYGPATH_W) 'tutorial/TutorialService.cpp'; else $(CYGPATH_W) '$(srcdir)/tutorial/TutorialService.cpp'; fi`; \
	then mv -f "$(DEPDIR)/TutorialService.Tpo" "$(DEPDIR)/TutorialService.Po"; else rm -f "$(DEPDIR)/TutorialService.Tpo"; exit 1; fi
#	source='tutorial/TutorialService.cpp' object='TutorialService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TutorialService.obj `if test -f 'tutorial/TutorialService.cpp'; then $(CYGPATH_W) 'tutorial/TutorialService.cpp'; else $(CYGPATH_W) '$(srcdir)/tutorial/TutorialService.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES) $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool \
	clean-noinstLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool clean-noinstLIBRARIES ctags \
	distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-exec install-exec-am \
	install-info install-info-am install-man install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
